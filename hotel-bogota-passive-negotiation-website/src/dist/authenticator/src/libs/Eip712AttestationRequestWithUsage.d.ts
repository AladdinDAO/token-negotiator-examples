import { JsonEncodable } from "../intefaces/JsonEncodable";
import { Verifiable } from "./Verifiable";
import { Validateable } from "./Validateable";
import { TokenValidateable } from "./TokenValidateable";
import { AttestationRequestWithUsage } from "./AttestationRequestWithUsage";
import { KeyPair } from "./KeyPair";
import { FullProofOfExponent } from "./FullProofOfExponent";
import { Eip712Token } from "./Eip712Token";
export declare class Eip712AttestationRequestWithUsage extends Eip712Token implements JsonEncodable, Verifiable, Validateable, TokenValidateable {
    private Eip712UserDataTypes;
    protected data: {
        payload: string;
        description: string;
        identifier: string;
        timestamp: string;
        expirationTime: string;
    };
    private Eip712UserDataPrimaryName;
    private Eip712UserDataDescription;
    private maxTokenValidityInMs;
    private acceptableTimeLimit;
    private attestationRequestWithUsage;
    private jsonEncoding;
    private userPublicKey;
    private userKey;
    constructor(userKey?: KeyPair, acceptableTimeLimit?: number, maxTokenValidityInMs?: number);
    fromData(attestorDomain: string, acceptableTimeLimit: number | undefined, maxTokenValidityInMs: number | undefined, identifier: string, attestationRequestWithUsage: AttestationRequestWithUsage, signingKey?: KeyPair): Promise<void>;
    Eip712AttestationRequestWithUsage(attestorDomain: string, acceptableTimeLimit: number, maxTokenValidityInMs: number, jsonEncoding: string): void;
    fillJsonData(json: string): void;
    constructorCheck(): void;
    makeToken(identifier: string, attestationRequestWithUsage: AttestationRequestWithUsage): Promise<string>;
    getIdentifier(): string;
    getUserPublicKey(): KeyPair;
    getPok(): FullProofOfExponent;
    getType(): number;
    getSessionPublicKey(): KeyPair;
    getJsonEncoding(): string;
    checkValidity(): boolean;
    checkTokenValidity(): boolean;
    private testNonceAndDescription;
    verify(): boolean;
}
