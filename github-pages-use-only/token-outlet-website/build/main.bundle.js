/*! For license information please see main.bundle.js.LICENSE.txt */
(() => {
  var t = {
    742: (t, e) => {
      "use strict";
      e.byteLength = function(t) {
        var e = a(t);
        var r = e[0];
        var n = e[1];
        return 3 * (r + n) / 4 - n;
      }, e.toByteArray = function(t) {
        var e;
        var r = a(t);
        var o = r[0];
        var s = r[1];
        var l = new i(function(t, e, r) {
          return 3 * (e + r) / 4 - r;
        }(0, o, s));
        var u = 0;
        var c = s > 0 ? o - 4 : o;
        var h;
        for (h = 0; h < c; h += 4) e = n[t.charCodeAt(h)] << 18 | n[t.charCodeAt(h + 1)] << 12 | n[t.charCodeAt(h + 2)] << 6 | n[t.charCodeAt(h + 3)], 
        l[u++] = e >> 16 & 255, l[u++] = e >> 8 & 255, l[u++] = 255 & e;
        2 === s && (e = n[t.charCodeAt(h)] << 2 | n[t.charCodeAt(h + 1)] >> 4, l[u++] = 255 & e);
        1 === s && (e = n[t.charCodeAt(h)] << 10 | n[t.charCodeAt(h + 1)] << 4 | n[t.charCodeAt(h + 2)] >> 2, l[u++] = e >> 8 & 255, 
        l[u++] = 255 & e);
        return l;
      }, e.fromByteArray = function(t) {
        var e;
        var n = t.length;
        var i = n % 3;
        var o = [];
        var s = 16383;
        for (var l = 0, a = n - i; l < a; l += s) o.push(c(t, l, l + s > a ? a : l + s));
        1 === i ? (e = t[n - 1], o.push(r[e >> 2] + r[e << 4 & 63] + '==')) : 2 === i && (e = (t[n - 2] << 8) + t[n - 1], o.push(r[e >> 10] + r[e >> 4 & 63] + r[e << 2 & 63] + '='));
        return o.join('');
      };
      var r = [];
      var n = [];
      var i = 'undefined' != typeof Uint8Array ? Uint8Array : Array;
      var o = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      for (var s = 0, l = o.length; s < l; ++s) r[s] = o[s], n[o.charCodeAt(s)] = s;
      function a(t) {
        var e = t.length;
        if (e % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
        var r = t.indexOf('=');
        return -1 === r && (r = e), [ r, r === e ? 0 : 4 - r % 4 ];
      }
      function u(t) {
        return r[t >> 18 & 63] + r[t >> 12 & 63] + r[t >> 6 & 63] + r[63 & t];
      }
      function c(t, e, r) {
        var n;
        var i = [];
        for (var o = e; o < r; o += 3) n = (t[o] << 16 & 16711680) + (t[o + 1] << 8 & 65280) + (255 & t[o + 2]), i.push(u(n));
        return i.join('');
      }
      n['-'.charCodeAt(0)] = 62, n['_'.charCodeAt(0)] = 63;
    },
    764: (t, e, r) => {
      "use strict";
      const n = r(742);
      const i = r(645);
      const o = 'function' == typeof Symbol && 'function' == typeof Symbol.for ? Symbol.for('nodejs.util.inspect.custom') : null;
      e.lW = a, e.h2 = 50;
      const s = 2147483647;
      function l(t) {
        if (t > s) throw new RangeError('The value "' + t + '" is invalid for option "size"');
        const e = new Uint8Array(t);
        return Object.setPrototypeOf(e, a.prototype), e;
      }
      function a(t, e, r) {
        if ('number' == typeof t) {
          if ('string' == typeof e) throw new TypeError('The "string" argument must be of type string. Received type number');
          return h(t);
        }
        return u(t, e, r);
      }
      function u(t, e, r) {
        if ('string' == typeof t) return function(t, e) {
          'string' == typeof e && '' !== e || (e = 'utf8');
          if (!a.isEncoding(e)) throw new TypeError('Unknown encoding: ' + e);
          const r = 0 | m(t, e);
          let n = l(r);
          const i = n.write(t, e);
          i !== r && (n = n.slice(0, i));
          return n;
        }(t, e);
        if (ArrayBuffer.isView(t)) return function(t) {
          if (Z(t, Uint8Array)) {
            const e = new Uint8Array(t);
            return g(e.buffer, e.byteOffset, e.byteLength);
          }
          return f(t);
        }(t);
        if (null == t) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t);
        if (Z(t, ArrayBuffer) || t && Z(t.buffer, ArrayBuffer)) return g(t, e, r);
        if ('undefined' != typeof SharedArrayBuffer && (Z(t, SharedArrayBuffer) || t && Z(t.buffer, SharedArrayBuffer))) return g(t, e, r);
        if ('number' == typeof t) throw new TypeError('The "value" argument must not be of type number. Received type number');
        const n = t.valueOf && t.valueOf();
        if (null != n && n !== t) return a.from(n, e, r);
        const i = function(t) {
          if (a.isBuffer(t)) {
            const e = 0 | d(t.length);
            const r = l(e);
            return 0 === r.length || t.copy(r, 0, 0, e), r;
          }
          if (void 0 !== t.length) return 'number' != typeof t.length || Y(t.length) ? l(0) : f(t);
          if ('Buffer' === t.type && Array.isArray(t.data)) return f(t.data);
        }(t);
        if (i) return i;
        if ('undefined' != typeof Symbol && null != Symbol.toPrimitive && 'function' == typeof t[Symbol.toPrimitive]) return a.from(t[Symbol.toPrimitive]('string'), e, r);
        throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof t);
      }
      function c(t) {
        if ('number' != typeof t) throw new TypeError('"size" argument must be of type number');
        if (t < 0) throw new RangeError('The value "' + t + '" is invalid for option "size"');
      }
      function h(t) {
        return c(t), l(t < 0 ? 0 : 0 | d(t));
      }
      function f(t) {
        const e = t.length < 0 ? 0 : 0 | d(t.length);
        const r = l(e);
        for (let n = 0; n < e; n += 1) r[n] = 255 & t[n];
        return r;
      }
      function g(t, e, r) {
        if (e < 0 || t.byteLength < e) throw new RangeError('"offset" is outside of buffer bounds');
        if (t.byteLength < e + (r || 0)) throw new RangeError('"length" is outside of buffer bounds');
        let n;
        return n = void 0 === e && void 0 === r ? new Uint8Array(t) : void 0 === r ? new Uint8Array(t, e) : new Uint8Array(t, e, r), 
        Object.setPrototypeOf(n, a.prototype), n;
      }
      function d(t) {
        if (t >= s) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + s.toString(16) + ' bytes');
        return 0 | t;
      }
      function m(t, e) {
        if (a.isBuffer(t)) return t.length;
        if (ArrayBuffer.isView(t) || Z(t, ArrayBuffer)) return t.byteLength;
        if ('string' != typeof t) throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof t);
        const r = t.length;
        const n = arguments.length > 2 && !0 === arguments[2];
        if (!n && 0 === r) return 0;
        let i = !1;
        for (;;) switch (e) {
         case 'ascii':
         case 'latin1':
         case 'binary':
          return r;

         case 'utf8':
         case 'utf-8':
          return V(t).length;

         case 'ucs2':
         case 'ucs-2':
         case 'utf16le':
         case 'utf-16le':
          return 2 * r;

         case 'hex':
          return r >>> 1;

         case 'base64':
          return G(t).length;

         default:
          if (i) return n ? -1 : V(t).length;
          e = ('' + e).toLowerCase(), i = !0;
        }
      }
      function y(t, e, r) {
        let n = !1;
        if ((void 0 === e || e < 0) && (e = 0), e > this.length) return '';
        if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return '';
        if ((r >>>= 0) <= (e >>>= 0)) return '';
        for (t || (t = 'utf8'); ;) switch (t) {
         case 'hex':
          return I(this, e, r);

         case 'utf8':
         case 'utf-8':
          return E(this, e, r);

         case 'ascii':
          return U(this, e, r);

         case 'latin1':
         case 'binary':
          return L(this, e, r);

         case 'base64':
          return N(this, e, r);

         case 'ucs2':
         case 'ucs-2':
         case 'utf16le':
         case 'utf-16le':
          return O(this, e, r);

         default:
          if (n) throw new TypeError('Unknown encoding: ' + t);
          t = (t + '').toLowerCase(), n = !0;
        }
      }
      function v(t, e, r) {
        const n = t[e];
        t[e] = t[r], t[r] = n;
      }
      function k(t, e, r, n, i) {
        if (0 === t.length) return -1;
        if ('string' == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), Y(r = +r) && (r = i ? 0 : t.length - 1), 
        r < 0 && (r = t.length + r), r >= t.length) {
          if (i) return -1;
          r = t.length - 1;
        } else if (r < 0) {
          if (!i) return -1;
          r = 0;
        }
        if ('string' == typeof e && (e = a.from(e, n)), a.isBuffer(e)) return 0 === e.length ? -1 : p(t, e, r, n, i);
        if ('number' == typeof e) return e &= 255, 'function' == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(t, e, r) : Uint8Array.prototype.lastIndexOf.call(t, e, r) : p(t, [ e ], r, n, i);
        throw new TypeError('val must be string, number or Buffer');
      }
      function p(t, e, r, n, i) {
        let o = 1;
        let s = t.length;
        let l = e.length;
        if (void 0 !== n && ('ucs2' === (n = String(n).toLowerCase()) || 'ucs-2' === n || 'utf16le' === n || 'utf-16le' === n)) {
          if (t.length < 2 || e.length < 2) return -1;
          o = 2, s /= 2, l /= 2, r /= 2;
        }
        function a(t, e) {
          return 1 === o ? t[e] : t.readUInt16BE(e * o);
        }
        let u;
        if (i) {
          let n = -1;
          for (u = r; u < s; u++) if (a(t, u) === a(e, -1 === n ? 0 : u - n)) {
            if (-1 === n && (n = u), u - n + 1 === l) return n * o;
          } else -1 !== n && (u -= u - n), n = -1;
        } else for (r + l > s && (r = s - l), u = r; u >= 0; u--) {
          let r = !0;
          for (let n = 0; n < l; n++) if (a(t, u + n) !== a(e, n)) {
            r = !1;
            break;
          }
          if (r) return u;
        }
        return -1;
      }
      function B(t, e, r, n) {
        r = Number(r) || 0;
        const i = t.length - r;
        n ? (n = Number(n)) > i && (n = i) : n = i;
        const o = e.length;
        let s;
        for (n > o / 2 && (n = o / 2), s = 0; s < n; ++s) {
          const n = parseInt(e.substr(2 * s, 2), 16);
          if (Y(n)) return s;
          t[r + s] = n;
        }
        return s;
      }
      function b(t, e, r, n) {
        return z(V(e, t.length - r), t, r, n);
      }
      function w(t, e, r, n) {
        return z(function(t) {
          const e = [];
          for (let r = 0; r < t.length; ++r) e.push(255 & t.charCodeAt(r));
          return e;
        }(e), t, r, n);
      }
      function A(t, e, r, n) {
        return z(G(e), t, r, n);
      }
      function x(t, e, r, n) {
        return z(function(t, e) {
          let r, n, i;
          const o = [];
          for (let s = 0; s < t.length && !((e -= 2) < 0); ++s) r = t.charCodeAt(s), n = r >> 8, i = r % 256, o.push(i), o.push(n);
          return o;
        }(e, t.length - r), t, r, n);
      }
      function N(t, e, r) {
        return 0 === e && r === t.length ? n.fromByteArray(t) : n.fromByteArray(t.slice(e, r));
      }
      function E(t, e, r) {
        r = Math.min(t.length, r);
        const n = [];
        let i = e;
        for (;i < r; ) {
          const e = t[i];
          let o = null;
          let s = e > 239 ? 4 : e > 223 ? 3 : e > 191 ? 2 : 1;
          if (i + s <= r) {
            let r, n, l, a;
            switch (s) {
             case 1:
              e < 128 && (o = e);
              break;

             case 2:
              r = t[i + 1], 128 == (192 & r) && (a = (31 & e) << 6 | 63 & r, a > 127 && (o = a));
              break;

             case 3:
              r = t[i + 1], n = t[i + 2], 128 == (192 & r) && 128 == (192 & n) && (a = (15 & e) << 12 | (63 & r) << 6 | 63 & n, a > 2047 && (a < 55296 || a > 57343) && (o = a));
              break;

             case 4:
              r = t[i + 1], n = t[i + 2], l = t[i + 3], 128 == (192 & r) && 128 == (192 & n) && 128 == (192 & l) && (a = (15 & e) << 18 | (63 & r) << 12 | (63 & n) << 6 | 63 & l, 
              a > 65535 && a < 1114112 && (o = a));
            }
          }
          null === o ? (o = 65533, s = 1) : o > 65535 && (o -= 65536, n.push(o >>> 10 & 1023 | 55296), o = 56320 | 1023 & o), n.push(o), 
          i += s;
        }
        return function(t) {
          const e = t.length;
          if (e <= S) return String.fromCharCode.apply(String, t);
          let r = '';
          let n = 0;
          for (;n < e; ) r += String.fromCharCode.apply(String, t.slice(n, n += S));
          return r;
        }(n);
      }
      a.TYPED_ARRAY_SUPPORT = function() {
        try {
          const t = new Uint8Array(1);
          const e = {
            foo: function() {
              return 42;
            }
          };
          return Object.setPrototypeOf(e, Uint8Array.prototype), Object.setPrototypeOf(t, e), 42 === t.foo();
        } catch (t) {
          return !1;
        }
      }(), a.TYPED_ARRAY_SUPPORT || 'undefined' == typeof console || 'function' != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), 
      Object.defineProperty(a.prototype, 'parent', {
        enumerable: !0,
        get: function() {
          if (a.isBuffer(this)) return this.buffer;
        }
      }), Object.defineProperty(a.prototype, 'offset', {
        enumerable: !0,
        get: function() {
          if (a.isBuffer(this)) return this.byteOffset;
        }
      }), a.poolSize = 8192, a.from = function(t, e, r) {
        return u(t, e, r);
      }, Object.setPrototypeOf(a.prototype, Uint8Array.prototype), Object.setPrototypeOf(a, Uint8Array), a.alloc = function(t, e, r) {
        return function(t, e, r) {
          return c(t), t <= 0 ? l(t) : void 0 !== e ? 'string' == typeof r ? l(t).fill(e, r) : l(t).fill(e) : l(t);
        }(t, e, r);
      }, a.allocUnsafe = function(t) {
        return h(t);
      }, a.allocUnsafeSlow = function(t) {
        return h(t);
      }, a.isBuffer = function(t) {
        return null != t && !0 === t._isBuffer && t !== a.prototype;
      }, a.compare = function(t, e) {
        if (Z(t, Uint8Array) && (t = a.from(t, t.offset, t.byteLength)), Z(e, Uint8Array) && (e = a.from(e, e.offset, e.byteLength)), 
        !a.isBuffer(t) || !a.isBuffer(e)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
        if (t === e) return 0;
        let r = t.length;
        let n = e.length;
        for (let i = 0, o = Math.min(r, n); i < o; ++i) if (t[i] !== e[i]) {
          r = t[i], n = e[i];
          break;
        }
        return r < n ? -1 : n < r ? 1 : 0;
      }, a.isEncoding = function(t) {
        switch (String(t).toLowerCase()) {
         case 'hex':
         case 'utf8':
         case 'utf-8':
         case 'ascii':
         case 'latin1':
         case 'binary':
         case 'base64':
         case 'ucs2':
         case 'ucs-2':
         case 'utf16le':
         case 'utf-16le':
          return !0;

         default:
          return !1;
        }
      }, a.concat = function(t, e) {
        if (!Array.isArray(t)) throw new TypeError('"list" argument must be an Array of Buffers');
        if (0 === t.length) return a.alloc(0);
        let r;
        if (void 0 === e) for (e = 0, r = 0; r < t.length; ++r) e += t[r].length;
        const n = a.allocUnsafe(e);
        let i = 0;
        for (r = 0; r < t.length; ++r) {
          let e = t[r];
          if (Z(e, Uint8Array)) i + e.length > n.length ? (a.isBuffer(e) || (e = a.from(e)), e.copy(n, i)) : Uint8Array.prototype.set.call(n, e, i); else {
            if (!a.isBuffer(e)) throw new TypeError('"list" argument must be an Array of Buffers');
            e.copy(n, i);
          }
          i += e.length;
        }
        return n;
      }, a.byteLength = m, a.prototype._isBuffer = !0, a.prototype.swap16 = function() {
        const t = this.length;
        if (t % 2 != 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
        for (let e = 0; e < t; e += 2) v(this, e, e + 1);
        return this;
      }, a.prototype.swap32 = function() {
        const t = this.length;
        if (t % 4 != 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
        for (let e = 0; e < t; e += 4) v(this, e, e + 3), v(this, e + 1, e + 2);
        return this;
      }, a.prototype.swap64 = function() {
        const t = this.length;
        if (t % 8 != 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
        for (let e = 0; e < t; e += 8) v(this, e, e + 7), v(this, e + 1, e + 6), v(this, e + 2, e + 5), v(this, e + 3, e + 4);
        return this;
      }, a.prototype.toString = function() {
        const t = this.length;
        return 0 === t ? '' : 0 === arguments.length ? E(this, 0, t) : y.apply(this, arguments);
      }, a.prototype.toLocaleString = a.prototype.toString, a.prototype.equals = function(t) {
        if (!a.isBuffer(t)) throw new TypeError('Argument must be a Buffer');
        return this === t || 0 === a.compare(this, t);
      }, a.prototype.inspect = function() {
        let t = '';
        const r = e.h2;
        return t = this.toString('hex', 0, r).replace(/(.{2})/g, '$1 ').trim(), this.length > r && (t += ' ... '), '<Buffer ' + t + '>';
      }, o && (a.prototype[o] = a.prototype.inspect), a.prototype.compare = function(t, e, r, n, i) {
        if (Z(t, Uint8Array) && (t = a.from(t, t.offset, t.byteLength)), !a.isBuffer(t)) throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof t);
        if (void 0 === e && (e = 0), void 0 === r && (r = t ? t.length : 0), void 0 === n && (n = 0), void 0 === i && (i = this.length), 
        e < 0 || r > t.length || n < 0 || i > this.length) throw new RangeError('out of range index');
        if (n >= i && e >= r) return 0;
        if (n >= i) return -1;
        if (e >= r) return 1;
        if (this === t) return 0;
        let o = (i >>>= 0) - (n >>>= 0);
        let s = (r >>>= 0) - (e >>>= 0);
        const l = Math.min(o, s);
        const u = this.slice(n, i);
        const c = t.slice(e, r);
        for (let a = 0; a < l; ++a) if (u[a] !== c[a]) {
          o = u[a], s = c[a];
          break;
        }
        return o < s ? -1 : s < o ? 1 : 0;
      }, a.prototype.includes = function(t, e, r) {
        return -1 !== this.indexOf(t, e, r);
      }, a.prototype.indexOf = function(t, e, r) {
        return k(this, t, e, r, !0);
      }, a.prototype.lastIndexOf = function(t, e, r) {
        return k(this, t, e, r, !1);
      }, a.prototype.write = function(t, e, r, n) {
        if (void 0 === e) n = 'utf8', r = this.length, e = 0; else if (void 0 === r && 'string' == typeof e) n = e, r = this.length, 
        e = 0; else {
          if (!isFinite(e)) throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
          e >>>= 0, isFinite(r) ? (r >>>= 0, void 0 === n && (n = 'utf8')) : (n = r, r = void 0);
        }
        const i = this.length - e;
        if ((void 0 === r || r > i) && (r = i), t.length > 0 && (r < 0 || e < 0) || e > this.length) throw new RangeError('Attempt to write outside buffer bounds');
        n || (n = 'utf8');
        let o = !1;
        for (;;) switch (n) {
         case 'hex':
          return B(this, t, e, r);

         case 'utf8':
         case 'utf-8':
          return b(this, t, e, r);

         case 'ascii':
         case 'latin1':
         case 'binary':
          return w(this, t, e, r);

         case 'base64':
          return A(this, t, e, r);

         case 'ucs2':
         case 'ucs-2':
         case 'utf16le':
         case 'utf-16le':
          return x(this, t, e, r);

         default:
          if (o) throw new TypeError('Unknown encoding: ' + n);
          n = ('' + n).toLowerCase(), o = !0;
        }
      }, a.prototype.toJSON = function() {
        return {
          type: 'Buffer',
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      const S = 4096;
      function U(t, e, r) {
        let n = '';
        r = Math.min(t.length, r);
        for (let i = e; i < r; ++i) n += String.fromCharCode(127 & t[i]);
        return n;
      }
      function L(t, e, r) {
        let n = '';
        r = Math.min(t.length, r);
        for (let i = e; i < r; ++i) n += String.fromCharCode(t[i]);
        return n;
      }
      function I(t, e, r) {
        const n = t.length;
        (!e || e < 0) && (e = 0), (!r || r < 0 || r > n) && (r = n);
        let i = '';
        for (let o = e; o < r; ++o) i += q[t[o]];
        return i;
      }
      function O(t, e, r) {
        const n = t.slice(e, r);
        let i = '';
        for (let o = 0; o < n.length - 1; o += 2) i += String.fromCharCode(n[o] + 256 * n[o + 1]);
        return i;
      }
      function H(t, e, r) {
        if (t % 1 != 0 || t < 0) throw new RangeError('offset is not uint');
        if (t + e > r) throw new RangeError('Trying to access beyond buffer length');
      }
      function C(t, e, r, n, i, o) {
        if (!a.isBuffer(t)) throw new TypeError('"buffer" argument must be a Buffer instance');
        if (e > i || e < o) throw new RangeError('"value" argument is out of bounds');
        if (r + n > t.length) throw new RangeError('Index out of range');
      }
      function R(t, e, r, n, i) {
        M(e, n, i, t, r, 7);
        let o = Number(e & BigInt(4294967295));
        t[r++] = o, o >>= 8, t[r++] = o, o >>= 8, t[r++] = o, o >>= 8, t[r++] = o;
        let s = Number(e >> BigInt(32) & BigInt(4294967295));
        return t[r++] = s, s >>= 8, t[r++] = s, s >>= 8, t[r++] = s, s >>= 8, t[r++] = s, r;
      }
      function T(t, e, r, n, i) {
        M(e, n, i, t, r, 7);
        let o = Number(e & BigInt(4294967295));
        t[r + 7] = o, o >>= 8, t[r + 6] = o, o >>= 8, t[r + 5] = o, o >>= 8, t[r + 4] = o;
        let s = Number(e >> BigInt(32) & BigInt(4294967295));
        return t[r + 3] = s, s >>= 8, t[r + 2] = s, s >>= 8, t[r + 1] = s, s >>= 8, t[r] = s, r + 8;
      }
      function D(t, e, r, n, i, o) {
        if (r + n > t.length) throw new RangeError('Index out of range');
        if (r < 0) throw new RangeError('Index out of range');
      }
      function P(t, e, r, n, o) {
        return e = +e, r >>>= 0, o || D(t, 0, r, 4), i.write(t, e, r, n, 23, 4), r + 4;
      }
      function F(t, e, r, n, o) {
        return e = +e, r >>>= 0, o || D(t, 0, r, 8), i.write(t, e, r, n, 52, 8), r + 8;
      }
      a.prototype.slice = function(t, e) {
        const r = this.length;
        (t = ~~t) < 0 ? (t += r) < 0 && (t = 0) : t > r && (t = r), (e = void 0 === e ? r : ~~e) < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r), 
        e < t && (e = t);
        const n = this.subarray(t, e);
        return Object.setPrototypeOf(n, a.prototype), n;
      }, a.prototype.readUintLE = a.prototype.readUIntLE = function(t, e, r) {
        t >>>= 0, e >>>= 0, r || H(t, e, this.length);
        let n = this[t];
        let i = 1;
        let o = 0;
        for (;++o < e && (i *= 256); ) n += this[t + o] * i;
        return n;
      }, a.prototype.readUintBE = a.prototype.readUIntBE = function(t, e, r) {
        t >>>= 0, e >>>= 0, r || H(t, e, this.length);
        let n = this[t + --e];
        let i = 1;
        for (;e > 0 && (i *= 256); ) n += this[t + --e] * i;
        return n;
      }, a.prototype.readUint8 = a.prototype.readUInt8 = function(t, e) {
        return t >>>= 0, e || H(t, 1, this.length), this[t];
      }, a.prototype.readUint16LE = a.prototype.readUInt16LE = function(t, e) {
        return t >>>= 0, e || H(t, 2, this.length), this[t] | this[t + 1] << 8;
      }, a.prototype.readUint16BE = a.prototype.readUInt16BE = function(t, e) {
        return t >>>= 0, e || H(t, 2, this.length), this[t] << 8 | this[t + 1];
      }, a.prototype.readUint32LE = a.prototype.readUInt32LE = function(t, e) {
        return t >>>= 0, e || H(t, 4, this.length), (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + 16777216 * this[t + 3];
      }, a.prototype.readUint32BE = a.prototype.readUInt32BE = function(t, e) {
        return t >>>= 0, e || H(t, 4, this.length), 16777216 * this[t] + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]);
      }, a.prototype.readBigUInt64LE = Q((function(t) {
        j(t >>>= 0, 'offset');
        const e = this[t];
        const r = this[t + 7];
        void 0 !== e && void 0 !== r || K(t, this.length - 8);
        const n = e + 256 * this[++t] + 65536 * this[++t] + this[++t] * 2 ** 24;
        const i = this[++t] + 256 * this[++t] + 65536 * this[++t] + r * 2 ** 24;
        return BigInt(n) + (BigInt(i) << BigInt(32));
      })), a.prototype.readBigUInt64BE = Q((function(t) {
        j(t >>>= 0, 'offset');
        const e = this[t];
        const r = this[t + 7];
        void 0 !== e && void 0 !== r || K(t, this.length - 8);
        const n = e * 2 ** 24 + 65536 * this[++t] + 256 * this[++t] + this[++t];
        const i = this[++t] * 2 ** 24 + 65536 * this[++t] + 256 * this[++t] + r;
        return (BigInt(n) << BigInt(32)) + BigInt(i);
      })), a.prototype.readIntLE = function(t, e, r) {
        t >>>= 0, e >>>= 0, r || H(t, e, this.length);
        let n = this[t];
        let i = 1;
        let o = 0;
        for (;++o < e && (i *= 256); ) n += this[t + o] * i;
        return i *= 128, n >= i && (n -= Math.pow(2, 8 * e)), n;
      }, a.prototype.readIntBE = function(t, e, r) {
        t >>>= 0, e >>>= 0, r || H(t, e, this.length);
        let n = e;
        let i = 1;
        let o = this[t + --n];
        for (;n > 0 && (i *= 256); ) o += this[t + --n] * i;
        return i *= 128, o >= i && (o -= Math.pow(2, 8 * e)), o;
      }, a.prototype.readInt8 = function(t, e) {
        return t >>>= 0, e || H(t, 1, this.length), 128 & this[t] ? -1 * (255 - this[t] + 1) : this[t];
      }, a.prototype.readInt16LE = function(t, e) {
        t >>>= 0, e || H(t, 2, this.length);
        const r = this[t] | this[t + 1] << 8;
        return 32768 & r ? 4294901760 | r : r;
      }, a.prototype.readInt16BE = function(t, e) {
        t >>>= 0, e || H(t, 2, this.length);
        const r = this[t + 1] | this[t] << 8;
        return 32768 & r ? 4294901760 | r : r;
      }, a.prototype.readInt32LE = function(t, e) {
        return t >>>= 0, e || H(t, 4, this.length), this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24;
      }, a.prototype.readInt32BE = function(t, e) {
        return t >>>= 0, e || H(t, 4, this.length), this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3];
      }, a.prototype.readBigInt64LE = Q((function(t) {
        j(t >>>= 0, 'offset');
        const e = this[t];
        const r = this[t + 7];
        void 0 !== e && void 0 !== r || K(t, this.length - 8);
        const n = this[t + 4] + 256 * this[t + 5] + 65536 * this[t + 6] + (r << 24);
        return (BigInt(n) << BigInt(32)) + BigInt(e + 256 * this[++t] + 65536 * this[++t] + this[++t] * 2 ** 24);
      })), a.prototype.readBigInt64BE = Q((function(t) {
        j(t >>>= 0, 'offset');
        const e = this[t];
        const r = this[t + 7];
        void 0 !== e && void 0 !== r || K(t, this.length - 8);
        const n = (e << 24) + 65536 * this[++t] + 256 * this[++t] + this[++t];
        return (BigInt(n) << BigInt(32)) + BigInt(this[++t] * 2 ** 24 + 65536 * this[++t] + 256 * this[++t] + r);
      })), a.prototype.readFloatLE = function(t, e) {
        return t >>>= 0, e || H(t, 4, this.length), i.read(this, t, !0, 23, 4);
      }, a.prototype.readFloatBE = function(t, e) {
        return t >>>= 0, e || H(t, 4, this.length), i.read(this, t, !1, 23, 4);
      }, a.prototype.readDoubleLE = function(t, e) {
        return t >>>= 0, e || H(t, 8, this.length), i.read(this, t, !0, 52, 8);
      }, a.prototype.readDoubleBE = function(t, e) {
        return t >>>= 0, e || H(t, 8, this.length), i.read(this, t, !1, 52, 8);
      }, a.prototype.writeUintLE = a.prototype.writeUIntLE = function(t, e, r, n) {
        if (t = +t, e >>>= 0, r >>>= 0, !n) {
          C(this, t, e, r, Math.pow(2, 8 * r) - 1, 0);
        }
        let i = 1;
        let o = 0;
        for (this[e] = 255 & t; ++o < r && (i *= 256); ) this[e + o] = t / i & 255;
        return e + r;
      }, a.prototype.writeUintBE = a.prototype.writeUIntBE = function(t, e, r, n) {
        if (t = +t, e >>>= 0, r >>>= 0, !n) {
          C(this, t, e, r, Math.pow(2, 8 * r) - 1, 0);
        }
        let i = r - 1;
        let o = 1;
        for (this[e + i] = 255 & t; --i >= 0 && (o *= 256); ) this[e + i] = t / o & 255;
        return e + r;
      }, a.prototype.writeUint8 = a.prototype.writeUInt8 = function(t, e, r) {
        return t = +t, e >>>= 0, r || C(this, t, e, 1, 255, 0), this[e] = 255 & t, e + 1;
      }, a.prototype.writeUint16LE = a.prototype.writeUInt16LE = function(t, e, r) {
        return t = +t, e >>>= 0, r || C(this, t, e, 2, 65535, 0), this[e] = 255 & t, this[e + 1] = t >>> 8, e + 2;
      }, a.prototype.writeUint16BE = a.prototype.writeUInt16BE = function(t, e, r) {
        return t = +t, e >>>= 0, r || C(this, t, e, 2, 65535, 0), this[e] = t >>> 8, this[e + 1] = 255 & t, e + 2;
      }, a.prototype.writeUint32LE = a.prototype.writeUInt32LE = function(t, e, r) {
        return t = +t, e >>>= 0, r || C(this, t, e, 4, 4294967295, 0), this[e + 3] = t >>> 24, this[e + 2] = t >>> 16, this[e + 1] = t >>> 8, 
        this[e] = 255 & t, e + 4;
      }, a.prototype.writeUint32BE = a.prototype.writeUInt32BE = function(t, e, r) {
        return t = +t, e >>>= 0, r || C(this, t, e, 4, 4294967295, 0), this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, 
        this[e + 3] = 255 & t, e + 4;
      }, a.prototype.writeBigUInt64LE = Q((function(t, e = 0) {
        return R(this, t, e, BigInt(0), BigInt('0xffffffffffffffff'));
      })), a.prototype.writeBigUInt64BE = Q((function(t, e = 0) {
        return T(this, t, e, BigInt(0), BigInt('0xffffffffffffffff'));
      })), a.prototype.writeIntLE = function(t, e, r, n) {
        if (t = +t, e >>>= 0, !n) {
          const n = Math.pow(2, 8 * r - 1);
          C(this, t, e, r, n - 1, -n);
        }
        let i = 0;
        let o = 1;
        let s = 0;
        for (this[e] = 255 & t; ++i < r && (o *= 256); ) t < 0 && 0 === s && 0 !== this[e + i - 1] && (s = 1), this[e + i] = (t / o >> 0) - s & 255;
        return e + r;
      }, a.prototype.writeIntBE = function(t, e, r, n) {
        if (t = +t, e >>>= 0, !n) {
          const n = Math.pow(2, 8 * r - 1);
          C(this, t, e, r, n - 1, -n);
        }
        let i = r - 1;
        let o = 1;
        let s = 0;
        for (this[e + i] = 255 & t; --i >= 0 && (o *= 256); ) t < 0 && 0 === s && 0 !== this[e + i + 1] && (s = 1), this[e + i] = (t / o >> 0) - s & 255;
        return e + r;
      }, a.prototype.writeInt8 = function(t, e, r) {
        return t = +t, e >>>= 0, r || C(this, t, e, 1, 127, -128), t < 0 && (t = 255 + t + 1), this[e] = 255 & t, e + 1;
      }, a.prototype.writeInt16LE = function(t, e, r) {
        return t = +t, e >>>= 0, r || C(this, t, e, 2, 32767, -32768), this[e] = 255 & t, this[e + 1] = t >>> 8, e + 2;
      }, a.prototype.writeInt16BE = function(t, e, r) {
        return t = +t, e >>>= 0, r || C(this, t, e, 2, 32767, -32768), this[e] = t >>> 8, this[e + 1] = 255 & t, e + 2;
      }, a.prototype.writeInt32LE = function(t, e, r) {
        return t = +t, e >>>= 0, r || C(this, t, e, 4, 2147483647, -2147483648), this[e] = 255 & t, this[e + 1] = t >>> 8, this[e + 2] = t >>> 16, 
        this[e + 3] = t >>> 24, e + 4;
      }, a.prototype.writeInt32BE = function(t, e, r) {
        return t = +t, e >>>= 0, r || C(this, t, e, 4, 2147483647, -2147483648), t < 0 && (t = 4294967295 + t + 1), this[e] = t >>> 24, 
        this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t, e + 4;
      }, a.prototype.writeBigInt64LE = Q((function(t, e = 0) {
        return R(this, t, e, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
      })), a.prototype.writeBigInt64BE = Q((function(t, e = 0) {
        return T(this, t, e, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
      })), a.prototype.writeFloatLE = function(t, e, r) {
        return P(this, t, e, !0, r);
      }, a.prototype.writeFloatBE = function(t, e, r) {
        return P(this, t, e, !1, r);
      }, a.prototype.writeDoubleLE = function(t, e, r) {
        return F(this, t, e, !0, r);
      }, a.prototype.writeDoubleBE = function(t, e, r) {
        return F(this, t, e, !1, r);
      }, a.prototype.copy = function(t, e, r, n) {
        if (!a.isBuffer(t)) throw new TypeError('argument should be a Buffer');
        if (r || (r = 0), n || 0 === n || (n = this.length), e >= t.length && (e = t.length), e || (e = 0), n > 0 && n < r && (n = r), 
        n === r) return 0;
        if (0 === t.length || 0 === this.length) return 0;
        if (e < 0) throw new RangeError('targetStart out of bounds');
        if (r < 0 || r >= this.length) throw new RangeError('Index out of range');
        if (n < 0) throw new RangeError('sourceEnd out of bounds');
        n > this.length && (n = this.length), t.length - e < n - r && (n = t.length - e + r);
        const i = n - r;
        return this === t && 'function' == typeof Uint8Array.prototype.copyWithin ? this.copyWithin(e, r, n) : Uint8Array.prototype.set.call(t, this.subarray(r, n), e), 
        i;
      }, a.prototype.fill = function(t, e, r, n) {
        if ('string' == typeof t) {
          if ('string' == typeof e ? (n = e, e = 0, r = this.length) : 'string' == typeof r && (n = r, r = this.length), void 0 !== n && 'string' != typeof n) throw new TypeError('encoding must be a string');
          if ('string' == typeof n && !a.isEncoding(n)) throw new TypeError('Unknown encoding: ' + n);
          if (1 === t.length) {
            const e = t.charCodeAt(0);
            ('utf8' === n && e < 128 || 'latin1' === n) && (t = e);
          }
        } else 'number' == typeof t ? t &= 255 : 'boolean' == typeof t && (t = Number(t));
        if (e < 0 || this.length < e || this.length < r) throw new RangeError('Out of range index');
        if (r <= e) return this;
        let i;
        if (e >>>= 0, r = void 0 === r ? this.length : r >>> 0, t || (t = 0), 'number' == typeof t) for (i = e; i < r; ++i) this[i] = t; else {
          const o = a.isBuffer(t) ? t : a.from(t, n);
          const s = o.length;
          if (0 === s) throw new TypeError('The value "' + t + '" is invalid for argument "value"');
          for (i = 0; i < r - e; ++i) this[i + e] = o[i % s];
        }
        return this;
      };
      const $ = {};
      function _(t, e, r) {
        $[t] = class extends r {
          constructor() {
            super(), Object.defineProperty(this, 'message', {
              value: e.apply(this, arguments),
              writable: !0,
              configurable: !0
            }), this.name = `${this.name} [${t}]`, this.stack, delete this.name;
          }
          get code() {
            return t;
          }
          set code(t) {
            Object.defineProperty(this, 'code', {
              configurable: !0,
              enumerable: !0,
              value: t,
              writable: !0
            });
          }
          toString() {
            return `${this.name} [${t}]: ${this.message}`;
          }
        };
      }
      function J(t) {
        let e = '';
        let r = t.length;
        const n = '-' === t[0] ? 1 : 0;
        for (;r >= n + 4; r -= 3) e = `_${t.slice(r - 3, r)}${e}`;
        return `${t.slice(0, r)}${e}`;
      }
      function M(t, e, r, n, i, o) {
        if (t > r || t < e) {
          const n = 'bigint' == typeof e ? 'n' : '';
          let i;
          throw i = o > 3 ? 0 === e || e === BigInt(0) ? `>= 0${n} and < 2${n} ** ${8 * (o + 1)}${n}` : `>= -(2${n} ** ${8 * (o + 1) - 1}${n}) and < 2 ** ${8 * (o + 1) - 1}${n}` : `>= ${e}${n} and <= ${r}${n}`, 
          new $.ERR_OUT_OF_RANGE('value', i, t);
        }
        !function(t, e, r) {
          j(e, 'offset'), void 0 !== t[e] && void 0 !== t[e + r] || K(e, t.length - (r + 1));
        }(n, i, o);
      }
      function j(t, e) {
        if ('number' != typeof t) throw new $.ERR_INVALID_ARG_TYPE(e, 'number', t);
      }
      function K(t, e, r) {
        if (Math.floor(t) !== t) throw j(t, r), new $.ERR_OUT_OF_RANGE(r || 'offset', 'an integer', t);
        if (e < 0) throw new $.ERR_BUFFER_OUT_OF_BOUNDS;
        throw new $.ERR_OUT_OF_RANGE(r || 'offset', `>= ${r ? 1 : 0} and <= ${e}`, t);
      }
      _('ERR_BUFFER_OUT_OF_BOUNDS', (function(t) {
        return t ? `${t} is outside of buffer bounds` : 'Attempt to access memory outside buffer bounds';
      }), RangeError), _('ERR_INVALID_ARG_TYPE', (function(t, e) {
        return `The "${t}" argument must be of type number. Received type ${typeof e}`;
      }), TypeError), _('ERR_OUT_OF_RANGE', (function(t, e, r) {
        let n = `The value of "${t}" is out of range.`;
        let i = r;
        return Number.isInteger(r) && Math.abs(r) > 2 ** 32 ? i = J(String(r)) : 'bigint' == typeof r && (i = String(r), (r > BigInt(2) ** BigInt(32) || r < -(BigInt(2) ** BigInt(32))) && (i = J(i)), 
        i += 'n'), n += ` It must be ${e}. Received ${i}`, n;
      }), RangeError);
      const W = /[^+/0-9A-Za-z-_]/g;
      function V(t, e) {
        let r;
        e = e || Infinity;
        const n = t.length;
        let i = null;
        const o = [];
        for (let s = 0; s < n; ++s) {
          if (r = t.charCodeAt(s), r > 55295 && r < 57344) {
            if (!i) {
              if (r > 56319) {
                (e -= 3) > -1 && o.push(239, 191, 189);
                continue;
              }
              if (s + 1 === n) {
                (e -= 3) > -1 && o.push(239, 191, 189);
                continue;
              }
              i = r;
              continue;
            }
            if (r < 56320) {
              (e -= 3) > -1 && o.push(239, 191, 189), i = r;
              continue;
            }
            r = 65536 + (i - 55296 << 10 | r - 56320);
          } else i && (e -= 3) > -1 && o.push(239, 191, 189);
          if (i = null, r < 128) {
            if ((e -= 1) < 0) break;
            o.push(r);
          } else if (r < 2048) {
            if ((e -= 2) < 0) break;
            o.push(r >> 6 | 192, 63 & r | 128);
          } else if (r < 65536) {
            if ((e -= 3) < 0) break;
            o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
          } else {
            if (!(r < 1114112)) throw new Error('Invalid code point');
            if ((e -= 4) < 0) break;
            o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
          }
        }
        return o;
      }
      function G(t) {
        return n.toByteArray(function(t) {
          if ((t = (t = t.split('=')[0]).trim().replace(W, '')).length < 2) return '';
          for (;t.length % 4 != 0; ) t += '=';
          return t;
        }(t));
      }
      function z(t, e, r, n) {
        let i;
        for (i = 0; i < n && !(i + r >= e.length || i >= t.length); ++i) e[i + r] = t[i];
        return i;
      }
      function Z(t, e) {
        return t instanceof e || null != t && null != t.constructor && null != t.constructor.name && t.constructor.name === e.name;
      }
      function Y(t) {
        return t != t;
      }
      const q = function() {
        const t = '0123456789abcdef';
        const e = new Array(256);
        for (let r = 0; r < 16; ++r) {
          const n = 16 * r;
          for (let i = 0; i < 16; ++i) e[n + i] = t[r] + t[i];
        }
        return e;
      }();
      function Q(t) {
        return 'undefined' == typeof BigInt ? X : t;
      }
      function X() {
        throw new Error('BigInt not supported');
      }
    },
    645: (t, e) => {
      e.read = function(t, e, r, n, i) {
        var o, s;
        var l = 8 * i - n - 1;
        var a = (1 << l) - 1;
        var u = a >> 1;
        var c = -7;
        var h = r ? i - 1 : 0;
        var f = r ? -1 : 1;
        var g = t[e + h];
        for (h += f, o = g & (1 << -c) - 1, g >>= -c, c += l; c > 0; o = 256 * o + t[e + h], h += f, c -= 8) ;
        for (s = o & (1 << -c) - 1, o >>= -c, c += n; c > 0; s = 256 * s + t[e + h], h += f, c -= 8) ;
        if (0 === o) o = 1 - u; else {
          if (o === a) return s ? NaN : Infinity * (g ? -1 : 1);
          s += Math.pow(2, n), o -= u;
        }
        return (g ? -1 : 1) * s * Math.pow(2, o - n);
      }, e.write = function(t, e, r, n, i, o) {
        var s, l, a;
        var u = 8 * o - i - 1;
        var c = (1 << u) - 1;
        var h = c >> 1;
        var f = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var g = n ? 0 : o - 1;
        var d = n ? 1 : -1;
        var m = e < 0 || 0 === e && 1 / e < 0 ? 1 : 0;
        for (e = Math.abs(e), isNaN(e) || Infinity === e ? (l = isNaN(e) ? 1 : 0, s = c) : (s = Math.floor(Math.log(e) / Math.LN2), 
        e * (a = Math.pow(2, -s)) < 1 && (s--, a *= 2), (e += s + h >= 1 ? f / a : f * Math.pow(2, 1 - h)) * a >= 2 && (s++, a /= 2), 
        s + h >= c ? (l = 0, s = c) : s + h >= 1 ? (l = (e * a - 1) * Math.pow(2, i), s += h) : (l = e * Math.pow(2, h - 1) * Math.pow(2, i), 
        s = 0)); i >= 8; t[r + g] = 255 & l, g += d, l /= 256, i -= 8) ;
        for (s = s << i | l, u += i; u > 0; t[r + g] = 255 & s, g += d, s /= 256, u -= 8) ;
        t[r + g - d] |= 128 * m;
      };
    }
  };
  var e = {};
  function r(n) {
    var i = e[n];
    if (void 0 !== i) return i.exports;
    var o = e[n] = {
      exports: {}
    };
    return t[n](o, o.exports, r), o.exports;
  }
  (() => {
    "use strict";
    var t = r(764);
    function e(t) {
      return e = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
        return typeof t;
      } : function(t) {
        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
      }, e(t);
    }
    var n = function(t, r) {
      0 === Object.keys(r).length && (r = r);
      var n = [];
      if (t.length && "object" === e(r) && Object.keys(r).length) {
        var i = Object.keys(r);
        return t.forEach((function(t) {
          var e = 1;
          i.forEach((function(n) {
            t[n].toString() !== r[n].toString() && (e = 0);
          })), e && n.push(t);
        })), n;
      }
      return t;
    };
    var i = function(t) {
      var e = localStorage.getItem(t);
      var r = [];
      var n = {
        tokens: [],
        noTokens: !0,
        success: !0
      };
      try {
        e && e.length && (0 !== (r = JSON.parse(e)).length && r.forEach((function(t) {
          t.token && t.secret && n.tokens.push(t);
        })), n.tokens.length && (n.noTokens = !1));
      } catch (i) {
        n.success = !1;
      }
      return n;
    };
    var o = function(e, r, n) {
      var i = JSON.parse(e);
      return i.length ? i.map((function(e) {
        if (e.token) {
          var i = new r(function(e) {
            return e = e.split('-').join('+').split('_').join('/').split('.').join('='), Uint8Array.from(t.lW.from(e, 'base64'));
          }(e.token).buffer);
          if (i && i[n]) return i[n];
        }
      })) : [];
    };
    function s(t, e, r) {
      return t instanceof Object == !1 ? r : e in t ? t[e] : r;
    }
    function l(t, e = 0, r = t.byteLength - e, n = !1) {
      let i = "";
      for (const o of new Uint8Array(t, e, r)) {
        const t = o.toString(16).toUpperCase();
        1 === t.length && (i += "0"), i += t, n && (i += " ");
      }
      return i.trim();
    }
    function a(t, e, r, n) {
      return e instanceof ArrayBuffer == !1 ? (t.error = "Wrong parameter: inputBuffer must be \"ArrayBuffer\"", !1) : 0 === e.byteLength ? (t.error = "Wrong parameter: inputBuffer has zero length", 
      !1) : r < 0 ? (t.error = "Wrong parameter: inputOffset less than zero", !1) : n < 0 ? (t.error = "Wrong parameter: inputLength less than zero", 
      !1) : !(e.byteLength - r - n < 0) || (t.error = "End of input reached before message was fully decoded (inconsistent offset and length values)", 
      !1);
    }
    function u(t, e) {
      let r = 0;
      if (1 === t.length) return t[0];
      for (let n = t.length - 1; n >= 0; n--) r += t[t.length - 1 - n] * Math.pow(2, e * n);
      return r;
    }
    function c(t, e, r = -1) {
      const n = r;
      let i = t;
      let o = 0;
      let s = Math.pow(2, e);
      for (let l = 1; l < 8; l++) {
        if (t < s) {
          let t;
          if (n < 0) t = new ArrayBuffer(l), o = l; else {
            if (n < l) return new ArrayBuffer(0);
            t = new ArrayBuffer(n), o = n;
          }
          const r = new Uint8Array(t);
          for (let n = l - 1; n >= 0; n--) {
            const t = Math.pow(2, n * e);
            r[o - n - 1] = Math.floor(i / t), i -= r[o - n - 1] * t;
          }
          return t;
        }
        s *= Math.pow(2, e);
      }
      return new ArrayBuffer(0);
    }
    function h(...t) {
      let e = 0;
      let r = 0;
      for (const o of t) e += o.byteLength;
      const n = new ArrayBuffer(e);
      const i = new Uint8Array(n);
      for (const o of t) i.set(new Uint8Array(o), r), r += o.byteLength;
      return n;
    }
    function f(...t) {
      let e = 0;
      let r = 0;
      for (const o of t) e += o.length;
      const n = new ArrayBuffer(e);
      const i = new Uint8Array(n);
      for (const o of t) i.set(o, r), r += o.length;
      return i;
    }
    function g() {
      const t = new Uint8Array(this.valueHex);
      if (this.valueHex.byteLength >= 2) {
        const e = 255 === t[0] && 128 & t[1];
        const r = 0 === t[0] && 0 == (128 & t[1]);
        (e || r) && this.warnings.push("Needlessly long format");
      }
      const e = new ArrayBuffer(this.valueHex.byteLength);
      const r = new Uint8Array(e);
      for (let s = 0; s < this.valueHex.byteLength; s++) r[s] = 0;
      r[0] = 128 & t[0];
      const n = u(r, 8);
      const i = new ArrayBuffer(this.valueHex.byteLength);
      const o = new Uint8Array(i);
      for (let s = 0; s < this.valueHex.byteLength; s++) o[s] = t[s];
      o[0] &= 127;
      return u(o, 8) - n;
    }
    function d(t, e) {
      if (t.byteLength !== e.byteLength) return !1;
      const r = new Uint8Array(t);
      const n = new Uint8Array(e);
      for (let i = 0; i < r.length; i++) if (r[i] !== n[i]) return !1;
      return !0;
    }
    function m(t, e) {
      const r = t.toString(10);
      if (e < r.length) return "";
      const n = e - r.length;
      const i = new Array(n);
      for (let o = 0; o < n; o++) i[o] = "0";
      return i.join("").concat(r);
    }
    Math.log(2);
    const y = [ new Uint8Array([ 1 ]) ];
    const v = "0123456789";
    class k {
      constructor(t = {}) {
        this.blockLength = s(t, "blockLength", 0), this.error = s(t, "error", ""), this.warnings = s(t, "warnings", []), this.valueBeforeDecode = "valueBeforeDecode" in t ? t.valueBeforeDecode.slice(0) : new ArrayBuffer(0);
      }
      static blockName() {
        return "baseBlock";
      }
      toJSON() {
        return {
          blockName: this.constructor.blockName(),
          blockLength: this.blockLength,
          error: this.error,
          warnings: this.warnings,
          valueBeforeDecode: l(this.valueBeforeDecode, 0, this.valueBeforeDecode.byteLength)
        };
      }
    }
    const p = t => class extends t {
      constructor(t = {}) {
        super(t), this.isHexOnly = s(t, "isHexOnly", !1), this.valueHex = "valueHex" in t ? t.valueHex.slice(0) : new ArrayBuffer(0);
      }
      static blockName() {
        return "hexBlock";
      }
      fromBER(t, e, r) {
        if (!1 === a(this, t, e, r)) return -1;
        return 0 === new Uint8Array(t, e, r).length ? (this.warnings.push("Zero buffer length"), e) : (this.valueHex = t.slice(e, e + r), 
        this.blockLength = r, e + r);
      }
      toBER(t = !1) {
        return !0 !== this.isHexOnly ? (this.error = "Flag \"isHexOnly\" is not set, abort", new ArrayBuffer(0)) : !0 === t ? new ArrayBuffer(this.valueHex.byteLength) : this.valueHex.slice(0);
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.blockName = this.constructor.blockName(), t.isHexOnly = this.isHexOnly, t.valueHex = l(this.valueHex, 0, this.valueHex.byteLength), 
        t;
      }
    };
    class B extends(p(k)){
      constructor(t = {}) {
        super(), "idBlock" in t ? (this.isHexOnly = s(t.idBlock, "isHexOnly", !1), this.valueHex = s(t.idBlock, "valueHex", new ArrayBuffer(0)), 
        this.tagClass = s(t.idBlock, "tagClass", -1), this.tagNumber = s(t.idBlock, "tagNumber", -1), this.isConstructed = s(t.idBlock, "isConstructed", !1)) : (this.tagClass = -1, 
        this.tagNumber = -1, this.isConstructed = !1);
      }
      static blockName() {
        return "identificationBlock";
      }
      toBER(t = !1) {
        let e = 0;
        let r;
        let n;
        switch (this.tagClass) {
         case 1:
          e |= 0;
          break;

         case 2:
          e |= 64;
          break;

         case 3:
          e |= 128;
          break;

         case 4:
          e |= 192;
          break;

         default:
          return this.error = "Unknown tag class", new ArrayBuffer(0);
        }
        if (this.isConstructed && (e |= 32), this.tagNumber < 31 && !this.isHexOnly) {
          if (r = new ArrayBuffer(1), n = new Uint8Array(r), !t) {
            let t = this.tagNumber;
            t &= 31, e |= t, n[0] = e;
          }
          return r;
        }
        if (!1 === this.isHexOnly) {
          const i = c(this.tagNumber, 7);
          const o = new Uint8Array(i);
          const s = i.byteLength;
          if (r = new ArrayBuffer(s + 1), n = new Uint8Array(r), n[0] = 31 | e, !t) {
            for (let t = 0; t < s - 1; t++) n[t + 1] = 128 | o[t];
            n[s] = o[s - 1];
          }
          return r;
        }
        if (r = new ArrayBuffer(this.valueHex.byteLength + 1), n = new Uint8Array(r), n[0] = 31 | e, !1 === t) {
          const t = new Uint8Array(this.valueHex);
          for (let e = 0; e < t.length - 1; e++) n[e + 1] = 128 | t[e];
          n[this.valueHex.byteLength] = t[t.length - 1];
        }
        return r;
      }
      fromBER(t, e, r) {
        if (!1 === a(this, t, e, r)) return -1;
        const n = new Uint8Array(t, e, r);
        if (0 === n.length) return this.error = "Zero buffer length", -1;
        switch (192 & n[0]) {
         case 0:
          this.tagClass = 1;
          break;

         case 64:
          this.tagClass = 2;
          break;

         case 128:
          this.tagClass = 3;
          break;

         case 192:
          this.tagClass = 4;
          break;

         default:
          return this.error = "Unknown tag class", -1;
        }
        this.isConstructed = 32 == (32 & n[0]), this.isHexOnly = !1;
        const i = 31 & n[0];
        if (31 !== i) this.tagNumber = i, this.blockLength = 1; else {
          let t = 1;
          this.valueHex = new ArrayBuffer(255);
          let e = 255;
          let r = new Uint8Array(this.valueHex);
          for (;128 & n[t]; ) {
            if (r[t - 1] = 127 & n[t], t++, t >= n.length) return this.error = "End of input reached before message was fully decoded", 
            -1;
            if (t === e) {
              e += 255;
              const t = new ArrayBuffer(e);
              const n = new Uint8Array(t);
              for (let e = 0; e < r.length; e++) n[e] = r[e];
              this.valueHex = new ArrayBuffer(e), r = new Uint8Array(this.valueHex);
            }
          }
          this.blockLength = t + 1, r[t - 1] = 127 & n[t];
          const i = new ArrayBuffer(t);
          const o = new Uint8Array(i);
          for (let n = 0; n < t; n++) o[n] = r[n];
          this.valueHex = new ArrayBuffer(t), r = new Uint8Array(this.valueHex), r.set(o), this.blockLength <= 9 ? this.tagNumber = u(r, 7) : (this.isHexOnly = !0, 
          this.warnings.push("Tag too long, represented as hex-coded"));
        }
        if (1 === this.tagClass && this.isConstructed) switch (this.tagNumber) {
         case 1:
         case 2:
         case 5:
         case 6:
         case 9:
         case 13:
         case 14:
         case 23:
         case 24:
         case 31:
         case 32:
         case 33:
         case 34:
          return this.error = "Constructed encoding used for primitive type", -1;
        }
        return e + this.blockLength;
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.blockName = this.constructor.blockName(), t.tagClass = this.tagClass, t.tagNumber = this.tagNumber, t.isConstructed = this.isConstructed, 
        t;
      }
    }
    class b extends k {
      constructor(t = {}) {
        super(), "lenBlock" in t ? (this.isIndefiniteForm = s(t.lenBlock, "isIndefiniteForm", !1), this.longFormUsed = s(t.lenBlock, "longFormUsed", !1), 
        this.length = s(t.lenBlock, "length", 0)) : (this.isIndefiniteForm = !1, this.longFormUsed = !1, this.length = 0);
      }
      static blockName() {
        return "lengthBlock";
      }
      fromBER(t, e, r) {
        if (!1 === a(this, t, e, r)) return -1;
        const n = new Uint8Array(t, e, r);
        if (0 === n.length) return this.error = "Zero buffer length", -1;
        if (255 === n[0]) return this.error = "Length block 0xFF is reserved by standard", -1;
        if (this.isIndefiniteForm = 128 === n[0], !0 === this.isIndefiniteForm) return this.blockLength = 1, e + this.blockLength;
        if (this.longFormUsed = !!(128 & n[0]), !1 === this.longFormUsed) return this.length = n[0], this.blockLength = 1, e + this.blockLength;
        const i = 127 & n[0];
        if (i > 8) return this.error = "Too big integer", -1;
        if (i + 1 > n.length) return this.error = "End of input reached before message was fully decoded", -1;
        const o = new Uint8Array(i);
        for (let s = 0; s < i; s++) o[s] = n[s + 1];
        return 0 === o[i - 1] && this.warnings.push("Needlessly long encoded length"), this.length = u(o, 8), this.longFormUsed && this.length <= 127 && this.warnings.push("Unnecessary usage of long length form"), 
        this.blockLength = i + 1, e + this.blockLength;
      }
      toBER(t = !1) {
        let e;
        let r;
        if (this.length > 127 && (this.longFormUsed = !0), this.isIndefiniteForm) return e = new ArrayBuffer(1), !1 === t && (r = new Uint8Array(e), 
        r[0] = 128), e;
        if (!0 === this.longFormUsed) {
          const n = c(this.length, 8);
          if (n.byteLength > 127) return this.error = "Too big length", new ArrayBuffer(0);
          if (e = new ArrayBuffer(n.byteLength + 1), !0 === t) return e;
          const i = new Uint8Array(n);
          r = new Uint8Array(e), r[0] = 128 | n.byteLength;
          for (let t = 0; t < n.byteLength; t++) r[t + 1] = i[t];
          return e;
        }
        return e = new ArrayBuffer(1), !1 === t && (r = new Uint8Array(e), r[0] = this.length), e;
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.blockName = this.constructor.blockName(), t.isIndefiniteForm = this.isIndefiniteForm, t.longFormUsed = this.longFormUsed, 
        t.length = this.length, t;
      }
    }
    class w extends k {
      constructor(t = {}) {
        super(t);
      }
      static blockName() {
        return "valueBlock";
      }
      fromBER(t, e, r) {
        throw TypeError("User need to make a specific function in a class which extends \"ValueBlock\"");
      }
      toBER(t = !1) {
        throw TypeError("User need to make a specific function in a class which extends \"ValueBlock\"");
      }
    }
    class A extends k {
      constructor(t = {}, e = w) {
        super(t), "name" in t && (this.name = t.name), "optional" in t && (this.optional = t.optional), "primitiveSchema" in t && (this.primitiveSchema = t.primitiveSchema), 
        this.idBlock = new B(t), this.lenBlock = new b(t), this.valueBlock = new e(t);
      }
      static blockName() {
        return "BaseBlock";
      }
      fromBER(t, e, r) {
        const n = this.valueBlock.fromBER(t, e, !0 === this.lenBlock.isIndefiniteForm ? r : this.lenBlock.length);
        return -1 === n ? (this.error = this.valueBlock.error, n) : (0 === this.idBlock.error.length && (this.blockLength += this.idBlock.blockLength), 
        0 === this.lenBlock.error.length && (this.blockLength += this.lenBlock.blockLength), 0 === this.valueBlock.error.length && (this.blockLength += this.valueBlock.blockLength), 
        n);
      }
      toBER(t = !1) {
        let e;
        const r = this.idBlock.toBER(t);
        const n = this.valueBlock.toBER(!0);
        this.lenBlock.length = n.byteLength;
        let i;
        if (e = h(r, this.lenBlock.toBER(t)), i = !1 === t ? this.valueBlock.toBER(t) : new ArrayBuffer(this.lenBlock.length), e = h(e, i), 
        !0 === this.lenBlock.isIndefiniteForm) {
          const r = new ArrayBuffer(2);
          if (!1 === t) {
            const t = new Uint8Array(r);
            t[0] = 0, t[1] = 0;
          }
          e = h(e, r);
        }
        return e;
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.idBlock = this.idBlock.toJSON(), t.lenBlock = this.lenBlock.toJSON(), t.valueBlock = this.valueBlock.toJSON(), 
        "name" in this && (t.name = this.name), "optional" in this && (t.optional = this.optional), "primitiveSchema" in this && (t.primitiveSchema = this.primitiveSchema.toJSON()), 
        t;
      }
      toString() {
        return `${this.constructor.blockName()} : ${l(this.valueBlock.valueHex)}`;
      }
    }
    class x extends w {
      constructor(t = {}) {
        super(t), this.valueHex = "valueHex" in t ? t.valueHex.slice(0) : new ArrayBuffer(0), this.isHexOnly = s(t, "isHexOnly", !0);
      }
      fromBER(t, e, r) {
        if (!1 === a(this, t, e, r)) return -1;
        const n = new Uint8Array(t, e, r);
        if (0 === n.length) return this.warnings.push("Zero buffer length"), e;
        this.valueHex = new ArrayBuffer(n.length);
        const i = new Uint8Array(this.valueHex);
        for (let o = 0; o < n.length; o++) i[o] = n[o];
        return this.blockLength = r, e + r;
      }
      toBER(t = !1) {
        return this.valueHex.slice(0);
      }
      static blockName() {
        return "PrimitiveValueBlock";
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.valueHex = l(this.valueHex, 0, this.valueHex.byteLength), t.isHexOnly = this.isHexOnly, t;
      }
    }
    class N extends A {
      constructor(t = {}) {
        super(t, x), this.idBlock.isConstructed = !1;
      }
      static blockName() {
        return "PRIMITIVE";
      }
    }
    class E extends w {
      constructor(t = {}) {
        super(t), this.value = s(t, "value", []), this.isIndefiniteForm = s(t, "isIndefiniteForm", !1);
      }
      fromBER(t, e, r) {
        const n = e;
        const i = r;
        if (!1 === a(this, t, e, r)) return -1;
        if (0 === new Uint8Array(t, e, r).length) return this.warnings.push("Zero buffer length"), e;
        function o(t, e) {
          return !0 === t ? 1 : e;
        }
        let s = e;
        for (;o(this.isIndefiniteForm, r) > 0; ) {
          const e = Bt(t, s, r);
          if (-1 === e.offset) return this.error = e.result.error, this.warnings.concat(e.result.warnings), -1;
          if (s = e.offset, this.blockLength += e.result.blockLength, r -= e.result.blockLength, this.value.push(e.result), !0 === this.isIndefiniteForm && e.result.constructor.blockName() === L.blockName()) break;
        }
        return !0 === this.isIndefiniteForm && (this.value[this.value.length - 1].constructor.blockName() === L.blockName() ? this.value.pop() : this.warnings.push("No EndOfContent block encoded")), 
        this.valueBeforeDecode = t.slice(n, n + i), s;
      }
      toBER(t = !1) {
        let e = new ArrayBuffer(0);
        for (let r = 0; r < this.value.length; r++) {
          e = h(e, this.value[r].toBER(t));
        }
        return e;
      }
      static blockName() {
        return "ConstructedValueBlock";
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        t.isIndefiniteForm = this.isIndefiniteForm, t.value = [];
        for (let r = 0; r < this.value.length; r++) t.value.push(this.value[r].toJSON());
        return t;
      }
    }
    class S extends A {
      constructor(t = {}) {
        super(t, E), this.idBlock.isConstructed = !0;
      }
      static blockName() {
        return "CONSTRUCTED";
      }
      fromBER(t, e, r) {
        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;
        const n = this.valueBlock.fromBER(t, e, !0 === this.lenBlock.isIndefiniteForm ? r : this.lenBlock.length);
        return -1 === n ? (this.error = this.valueBlock.error, n) : (0 === this.idBlock.error.length && (this.blockLength += this.idBlock.blockLength), 
        0 === this.lenBlock.error.length && (this.blockLength += this.lenBlock.blockLength), 0 === this.valueBlock.error.length && (this.blockLength += this.valueBlock.blockLength), 
        n);
      }
      toString() {
        const t = [];
        for (const r of this.valueBlock.value) t.push(r.toString().split("\n").map((t => `  ${t}`)).join("\n"));
        const e = 3 === this.idBlock.tagClass ? `[${this.idBlock.tagNumber}]` : this.constructor.blockName();
        return t.length ? `${e} :\n${t.join("\n")}` : `${e} :`;
      }
    }
    class U extends w {
      constructor(t = {}) {
        super(t);
      }
      fromBER(t, e, r) {
        return e;
      }
      toBER(t = !1) {
        return new ArrayBuffer(0);
      }
      static blockName() {
        return "EndOfContentValueBlock";
      }
    }
    class L extends A {
      constructor(t = {}) {
        super(t, U), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 0;
      }
      static blockName() {
        return "EndOfContent";
      }
    }
    class I extends w {
      constructor(t = {}) {
        if (super(t), this.value = s(t, "value", !1), this.isHexOnly = s(t, "isHexOnly", !1), "valueHex" in t) this.valueHex = t.valueHex.slice(0); else if (this.valueHex = new ArrayBuffer(1), 
        !0 === this.value) {
          new Uint8Array(this.valueHex)[0] = 255;
        }
      }
      fromBER(t, e, r) {
        if (!1 === a(this, t, e, r)) return -1;
        const n = new Uint8Array(t, e, r);
        r > 1 && this.warnings.push("Boolean value encoded in more then 1 octet"), this.isHexOnly = !0, this.valueHex = new ArrayBuffer(n.length);
        const i = new Uint8Array(this.valueHex);
        for (let o = 0; o < n.length; o++) i[o] = n[o];
        return 0 !== g.call(this) ? this.value = !0 : this.value = !1, this.blockLength = r, e + r;
      }
      toBER(t = !1) {
        return this.valueHex;
      }
      static blockName() {
        return "BooleanValueBlock";
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.value = this.value, t.isHexOnly = this.isHexOnly, t.valueHex = l(this.valueHex, 0, this.valueHex.byteLength), t;
      }
    }
    class O extends A {
      constructor(t = {}) {
        super(t, I), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 1;
      }
      static blockName() {
        return "BOOLEAN";
      }
      toString() {
        return `${this.constructor.blockName()} : ${this.valueBlock.value}`;
      }
    }
    class H extends S {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 16;
      }
      static blockName() {
        return "SEQUENCE";
      }
    }
    class C extends S {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 17;
      }
      static blockName() {
        return "SET";
      }
    }
    class R extends A {
      constructor(t = {}) {
        super(t, k), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 5;
      }
      static blockName() {
        return "NULL";
      }
      fromBER(t, e, r) {
        return this.lenBlock.length > 0 && this.warnings.push("Non-zero length of value block for Null type"), 0 === this.idBlock.error.length && (this.blockLength += this.idBlock.blockLength), 
        0 === this.lenBlock.error.length && (this.blockLength += this.lenBlock.blockLength), this.blockLength += r, e + r > t.byteLength ? (this.error = "End of input reached before message was fully decoded (inconsistent offset and length values)", 
        -1) : e + r;
      }
      toBER(t = !1) {
        const e = new ArrayBuffer(2);
        if (!0 === t) return e;
        const r = new Uint8Array(e);
        return r[0] = 5, r[1] = 0, e;
      }
      toString() {
        return `${this.constructor.blockName()}`;
      }
    }
    class T extends(p(E)){
      constructor(t = {}) {
        super(t), this.isConstructed = s(t, "isConstructed", !1);
      }
      fromBER(t, e, r) {
        let n = 0;
        if (!0 === this.isConstructed) {
          if (this.isHexOnly = !1, n = E.prototype.fromBER.call(this, t, e, r), -1 === n) return n;
          for (let t = 0; t < this.value.length; t++) {
            const e = this.value[t].constructor.blockName();
            if (e === L.blockName()) {
              if (!0 === this.isIndefiniteForm) break;
              return this.error = "EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only", -1;
            }
            if (e !== D.blockName()) return this.error = "OCTET STRING may consists of OCTET STRINGs only", -1;
          }
        } else this.isHexOnly = !0, n = super.fromBER(t, e, r), this.blockLength = r;
        return n;
      }
      toBER(t = !1) {
        if (!0 === this.isConstructed) return E.prototype.toBER.call(this, t);
        let e = new ArrayBuffer(this.valueHex.byteLength);
        return !0 === t || 0 === this.valueHex.byteLength || (e = this.valueHex.slice(0)), e;
      }
      static blockName() {
        return "OctetStringValueBlock";
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.isConstructed = this.isConstructed, t.isHexOnly = this.isHexOnly, t.valueHex = l(this.valueHex, 0, this.valueHex.byteLength), 
        t;
      }
    }
    class D extends A {
      constructor(t = {}) {
        super(t, T), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 4;
      }
      fromBER(t, e, r) {
        if (this.valueBlock.isConstructed = this.idBlock.isConstructed, this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm, 
        0 === r) return 0 === this.idBlock.error.length && (this.blockLength += this.idBlock.blockLength), 0 === this.lenBlock.error.length && (this.blockLength += this.lenBlock.blockLength), 
        e;
        if (!this.valueBlock.isConstructed) {
          const i = t.slice(e, e + r);
          try {
            const t = bt(i);
            -1 !== t.offset && t.offset === r && (this.valueBlock.value = [ t.result ]);
          } catch (n) {}
        }
        return super.fromBER(t, e, r);
      }
      static blockName() {
        return "OCTET STRING";
      }
      isEqual(t) {
        return t instanceof D != !1 && JSON.stringify(this) === JSON.stringify(t);
      }
      toString() {
        return this.valueBlock.isConstructed || this.valueBlock.value && this.valueBlock.value.length ? S.prototype.toString.call(this) : `${this.constructor.blockName()} : ${l(this.valueBlock.valueHex)}`;
      }
    }
    class P extends(p(E)){
      constructor(t = {}) {
        super(t), this.unusedBits = s(t, "unusedBits", 0), this.isConstructed = s(t, "isConstructed", !1), this.blockLength = this.valueHex.byteLength;
      }
      fromBER(t, e, r) {
        if (0 === r) return e;
        let n = -1;
        if (!0 === this.isConstructed) {
          if (n = E.prototype.fromBER.call(this, t, e, r), -1 === n) return n;
          for (let t = 0; t < this.value.length; t++) {
            const e = this.value[t].constructor.blockName();
            if (e === L.blockName()) {
              if (!0 === this.isIndefiniteForm) break;
              return this.error = "EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only", -1;
            }
            if (e !== F.blockName()) return this.error = "BIT STRING may consists of BIT STRINGs only", -1;
            if (this.unusedBits > 0 && this.value[t].valueBlock.unusedBits > 0) return this.error = "Using of \"unused bits\" inside constructive BIT STRING allowed for least one only", 
            -1;
            if (this.unusedBits = this.value[t].valueBlock.unusedBits, this.unusedBits > 7) return this.error = "Unused bits for BitString must be in range 0-7", 
            -1;
          }
          return n;
        }
        if (!1 === a(this, t, e, r)) return -1;
        const i = new Uint8Array(t, e, r);
        if (this.unusedBits = i[0], this.unusedBits > 7) return this.error = "Unused bits for BitString must be in range 0-7", -1;
        if (!this.unusedBits) {
          const n = t.slice(e + 1, e + r);
          try {
            const t = bt(n);
            -1 !== t.offset && t.offset === r - 1 && (this.value = [ t.result ]);
          } catch (s) {}
        }
        this.valueHex = new ArrayBuffer(i.length - 1);
        const o = new Uint8Array(this.valueHex);
        for (let l = 0; l < r - 1; l++) o[l] = i[l + 1];
        return this.blockLength = i.length, e + r;
      }
      toBER(t = !1) {
        if (!0 === this.isConstructed) return E.prototype.toBER.call(this, t);
        if (!0 === t) return new ArrayBuffer(this.valueHex.byteLength + 1);
        if (0 === this.valueHex.byteLength) return new ArrayBuffer(0);
        const e = new Uint8Array(this.valueHex);
        const r = new ArrayBuffer(this.valueHex.byteLength + 1);
        const n = new Uint8Array(r);
        n[0] = this.unusedBits;
        for (let i = 0; i < this.valueHex.byteLength; i++) n[i + 1] = e[i];
        return r;
      }
      static blockName() {
        return "BitStringValueBlock";
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.unusedBits = this.unusedBits, t.isConstructed = this.isConstructed, t.isHexOnly = this.isHexOnly, t.valueHex = l(this.valueHex, 0, this.valueHex.byteLength), 
        t;
      }
    }
    class F extends A {
      constructor(t = {}) {
        super(t, P), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 3;
      }
      static blockName() {
        return "BIT STRING";
      }
      fromBER(t, e, r) {
        return 0 === r ? e : (this.valueBlock.isConstructed = this.idBlock.isConstructed, this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm, 
        super.fromBER(t, e, r));
      }
      isEqual(t) {
        return t instanceof F != !1 && JSON.stringify(this) === JSON.stringify(t);
      }
      toString() {
        if (this.valueBlock.isConstructed || this.valueBlock.value && this.valueBlock.value.length) return S.prototype.toString.call(this);
        {
          const t = [];
          const e = new Uint8Array(this.valueBlock.valueHex);
          for (const r of e) t.push(r.toString(2).padStart(8, "0"));
          return `${this.constructor.blockName()} : ${t.join("")}`;
        }
      }
    }
    class $ extends(p(w)){
      constructor(t = {}) {
        super(t), "value" in t && (this.valueDec = t.value);
      }
      set valueHex(t) {
        this._valueHex = t.slice(0), t.byteLength >= 4 ? (this.warnings.push("Too big Integer for decoding, hex only"), this.isHexOnly = !0, 
        this._valueDec = 0) : (this.isHexOnly = !1, t.byteLength > 0 && (this._valueDec = g.call(this)));
      }
      get valueHex() {
        return this._valueHex;
      }
      set valueDec(t) {
        this._valueDec = t, this.isHexOnly = !1, this._valueHex = function(t) {
          const e = t < 0 ? -1 * t : t;
          let r = 128;
          for (let n = 1; n < 8; n++) {
            if (e <= r) {
              if (t < 0) {
                const t = c(r - e, 8, n);
                return new Uint8Array(t)[0] |= 128, t;
              }
              let i = c(e, 8, n);
              let o = new Uint8Array(i);
              if (128 & o[0]) {
                const t = i.slice(0);
                const e = new Uint8Array(t);
                i = new ArrayBuffer(i.byteLength + 1), o = new Uint8Array(i);
                for (let r = 0; r < t.byteLength; r++) o[r + 1] = e[r];
                o[0] = 0;
              }
              return i;
            }
            r *= Math.pow(2, 8);
          }
          return new ArrayBuffer(0);
        }(t);
      }
      get valueDec() {
        return this._valueDec;
      }
      fromDER(t, e, r, n = 0) {
        const i = this.fromBER(t, e, r);
        if (-1 === i) return i;
        const o = new Uint8Array(this._valueHex);
        if (0 === o[0] && 0 != (128 & o[1])) {
          const t = new ArrayBuffer(this._valueHex.byteLength - 1);
          new Uint8Array(t).set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1)), this._valueHex = t.slice(0);
        } else if (0 !== n && this._valueHex.byteLength < n) {
          n - this._valueHex.byteLength > 1 && (n = this._valueHex.byteLength + 1);
          const t = new ArrayBuffer(n);
          new Uint8Array(t).set(o, n - this._valueHex.byteLength), this._valueHex = t.slice(0);
        }
        return i;
      }
      toDER(t = !1) {
        const e = new Uint8Array(this._valueHex);
        switch (!0) {
         case 0 != (128 & e[0]):
          {
            const t = new ArrayBuffer(this._valueHex.byteLength + 1);
            const r = new Uint8Array(t);
            r[0] = 0, r.set(e, 1), this._valueHex = t.slice(0);
          }
          break;

         case 0 === e[0] && 0 == (128 & e[1]):
          {
            const t = new ArrayBuffer(this._valueHex.byteLength - 1);
            new Uint8Array(t).set(new Uint8Array(this._valueHex, 1, this._valueHex.byteLength - 1)), this._valueHex = t.slice(0);
          }
        }
        return this.toBER(t);
      }
      fromBER(t, e, r) {
        const n = super.fromBER(t, e, r);
        return -1 === n ? n : (this.blockLength = r, e + r);
      }
      toBER(t = !1) {
        return this.valueHex.slice(0);
      }
      static blockName() {
        return "IntegerValueBlock";
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.valueDec = this.valueDec, t;
      }
      toString() {
        function t(t, e) {
          const r = new Uint8Array([ 0 ]);
          let n = new Uint8Array(t);
          let i = new Uint8Array(e);
          let o = n.slice(0);
          const s = o.length - 1;
          let l = i.slice(0);
          const a = l.length - 1;
          let u = 0;
          let c = 0;
          for (let h = a < s ? s : a; h >= 0; h--, c++) {
            if (!0 == c < l.length) u = o[s - c] + l[a - c] + r[0]; else u = o[s - c] + r[0];
            if (r[0] = u / 10, !0 == c >= o.length) o = f(new Uint8Array([ u % 10 ]), o); else o[s - c] = u % 10;
          }
          return r[0] > 0 && (o = f(r, o)), o.slice(0);
        }
        function e(t) {
          if (t >= y.length) for (let e = y.length; e <= t; e++) {
            const t = new Uint8Array([ 0 ]);
            let r = y[e - 1].slice(0);
            for (let e = r.length - 1; e >= 0; e--) {
              const n = new Uint8Array([ (r[e] << 1) + t[0] ]);
              t[0] = n[0] / 10, r[e] = n[0] % 10;
            }
            t[0] > 0 && (r = f(t, r)), y.push(r);
          }
          return y[t];
        }
        function r(t, e) {
          let r = 0;
          let n = new Uint8Array(t);
          let i = new Uint8Array(e);
          let o = n.slice(0);
          const s = o.length - 1;
          let l = i.slice(0);
          const a = l.length - 1;
          let u;
          let c = 0;
          for (let h = a; h >= 0; h--, c++) if (u = o[s - c] - l[a - c] - r, !0 == u < 0) r = 1, o[s - c] = u + 10; else r = 0, o[s - c] = u;
          if (r > 0) for (let h = s - a + 1; h >= 0; h--, c++) {
            if (u = o[s - c] - r, !(u < 0)) {
              r = 0, o[s - c] = u;
              break;
            }
            r = 1, o[s - c] = u + 10;
          }
          return o.slice();
        }
        const n = 8 * this._valueHex.byteLength - 1;
        let i = new Uint8Array(8 * this._valueHex.byteLength / 3);
        let o = 0;
        let s;
        const l = new Uint8Array(this._valueHex);
        let a = "";
        let u = !1;
        for (let c = this._valueHex.byteLength - 1; c >= 0; c--) {
          s = l[c];
          for (let l = 0; l < 8; l++) {
            if (1 == (1 & s)) if (o === n) i = r(e(o), i), a = "-"; else i = t(i, e(o));
            o++, s >>= 1;
          }
        }
        for (let c = 0; c < i.length; c++) i[c] && (u = !0), u && (a += v.charAt(i[c]));
        return !1 === u && (a += v.charAt(0)), a;
      }
    }
    class _ extends A {
      constructor(t = {}) {
        super(t, $), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 2;
      }
      static blockName() {
        return "INTEGER";
      }
      isEqual(t) {
        return t instanceof _ ? this.valueBlock.isHexOnly && t.valueBlock.isHexOnly ? d(this.valueBlock.valueHex, t.valueBlock.valueHex) : this.valueBlock.isHexOnly === t.valueBlock.isHexOnly && this.valueBlock.valueDec === t.valueBlock.valueDec : t instanceof ArrayBuffer && d(this.valueBlock.valueHex, t);
      }
      convertToDER() {
        const t = new _({
          valueHex: this.valueBlock.valueHex
        });
        return t.valueBlock.toDER(), t;
      }
      convertFromDER() {
        const t = this.valueBlock.valueHex.byteLength % 2 ? this.valueBlock.valueHex.byteLength + 1 : this.valueBlock.valueHex.byteLength;
        const e = new _({
          valueHex: this.valueBlock.valueHex
        });
        return e.valueBlock.fromDER(e.valueBlock.valueHex, 0, e.valueBlock.valueHex.byteLength, t), e;
      }
      toString() {
        const t = l(this.valueBlock.valueHex);
        const e = BigInt(`0x${t}`);
        return `${this.constructor.blockName()} : ${e.toString()}`;
      }
    }
    class J extends _ {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 10;
      }
      static blockName() {
        return "ENUMERATED";
      }
    }
    class M extends(p(k)){
      constructor(t = {}) {
        super(t), this.valueDec = s(t, "valueDec", -1), this.isFirstSid = s(t, "isFirstSid", !1);
      }
      static blockName() {
        return "sidBlock";
      }
      fromBER(t, e, r) {
        if (0 === r) return e;
        if (!1 === a(this, t, e, r)) return -1;
        const n = new Uint8Array(t, e, r);
        this.valueHex = new ArrayBuffer(r);
        let i = new Uint8Array(this.valueHex);
        for (let l = 0; l < r && (i[l] = 127 & n[l], this.blockLength++, 0 != (128 & n[l])); l++) ;
        const o = new ArrayBuffer(this.blockLength);
        const s = new Uint8Array(o);
        for (let l = 0; l < this.blockLength; l++) s[l] = i[l];
        return this.valueHex = o.slice(0), i = new Uint8Array(this.valueHex), 0 != (128 & n[this.blockLength - 1]) ? (this.error = "End of input reached before message was fully decoded", 
        -1) : (0 === i[0] && this.warnings.push("Needlessly long format of SID encoding"), this.blockLength <= 8 ? this.valueDec = u(i, 7) : (this.isHexOnly = !0, 
        this.warnings.push("Too big SID for decoding, hex only")), e + this.blockLength);
      }
      toBER(t = !1) {
        let e;
        let r;
        if (this.isHexOnly) {
          if (!0 === t) return new ArrayBuffer(this.valueHex.byteLength);
          const n = new Uint8Array(this.valueHex);
          e = new ArrayBuffer(this.blockLength), r = new Uint8Array(e);
          for (let t = 0; t < this.blockLength - 1; t++) r[t] = 128 | n[t];
          return r[this.blockLength - 1] = n[this.blockLength - 1], e;
        }
        const n = c(this.valueDec, 7);
        if (0 === n.byteLength) return this.error = "Error during encoding SID value", new ArrayBuffer(0);
        if (e = new ArrayBuffer(n.byteLength), !1 === t) {
          const t = new Uint8Array(n);
          r = new Uint8Array(e);
          for (let e = 0; e < n.byteLength - 1; e++) r[e] = 128 | t[e];
          r[n.byteLength - 1] = t[n.byteLength - 1];
        }
        return e;
      }
      toString() {
        let t = "";
        if (!0 === this.isHexOnly) t = l(this.valueHex, 0, this.valueHex.byteLength); else if (this.isFirstSid) {
          let e = this.valueDec;
          this.valueDec <= 39 ? t = "0." : this.valueDec <= 79 ? (t = "1.", e -= 40) : (t = "2.", e -= 80), t += e.toString();
        } else t = this.valueDec.toString();
        return t;
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.valueDec = this.valueDec, t.isFirstSid = this.isFirstSid, t;
      }
    }
    class j extends w {
      constructor(t = {}) {
        super(t), this.fromString(s(t, "value", ""));
      }
      fromBER(t, e, r) {
        let n = e;
        for (;r > 0; ) {
          const e = new M;
          if (n = e.fromBER(t, n, r), -1 === n) return this.blockLength = 0, this.error = e.error, n;
          0 === this.value.length && (e.isFirstSid = !0), this.blockLength += e.blockLength, r -= e.blockLength, this.value.push(e);
        }
        return n;
      }
      toBER(t = !1) {
        let e = new ArrayBuffer(0);
        for (let r = 0; r < this.value.length; r++) {
          const n = this.value[r].toBER(t);
          if (0 === n.byteLength) return this.error = this.value[r].error, new ArrayBuffer(0);
          e = h(e, n);
        }
        return e;
      }
      fromString(t) {
        this.value = [];
        let e = 0;
        let r = 0;
        let n = "";
        let i = !1;
        do {
          if (r = t.indexOf(".", e), n = -1 === r ? t.substr(e) : t.substr(e, r - e), e = r + 1, i) {
            const t = this.value[0];
            let e = 0;
            switch (t.valueDec) {
             case 0:
              break;

             case 1:
              e = 40;
              break;

             case 2:
              e = 80;
              break;

             default:
              return this.value = [], !1;
            }
            const r = parseInt(n, 10);
            if (isNaN(r)) return !0;
            t.valueDec = r + e, i = !1;
          } else {
            const t = new M;
            if (t.valueDec = parseInt(n, 10), isNaN(t.valueDec)) return !0;
            0 === this.value.length && (t.isFirstSid = !0, i = !0), this.value.push(t);
          }
        } while (-1 !== r);
        return !0;
      }
      toString() {
        let t = "";
        let e = !1;
        for (let r = 0; r < this.value.length; r++) {
          e = this.value[r].isHexOnly;
          let n = this.value[r].toString();
          0 !== r && (t = `${t}.`), e ? (n = `{${n}}`, this.value[r].isFirstSid ? t = `2.{${n} - 80}` : t += n) : t += n;
        }
        return t;
      }
      static blockName() {
        return "ObjectIdentifierValueBlock";
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        t.value = this.toString(), t.sidArray = [];
        for (let r = 0; r < this.value.length; r++) t.sidArray.push(this.value[r].toJSON());
        return t;
      }
    }
    class K extends A {
      constructor(t = {}) {
        super(t, j), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 6;
      }
      static blockName() {
        return "OBJECT IDENTIFIER";
      }
      toString() {
        return `${this.constructor.blockName()} : ${this.valueBlock.toString()}`;
      }
    }
    class W extends(p(k)){
      constructor(t = {}) {
        super(t), this.isHexOnly = !0, this.value = "";
      }
      static blockName() {
        return "Utf8StringValueBlock";
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.value = this.value, t;
      }
    }
    class V extends A {
      constructor(t = {}) {
        super(t, W), "value" in t && this.fromString(t.value), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 12;
      }
      static blockName() {
        return "UTF8String";
      }
      fromBER(t, e, r) {
        const n = this.valueBlock.fromBER(t, e, !0 === this.lenBlock.isIndefiniteForm ? r : this.lenBlock.length);
        return -1 === n ? (this.error = this.valueBlock.error, n) : (this.fromBuffer(this.valueBlock.valueHex), 0 === this.idBlock.error.length && (this.blockLength += this.idBlock.blockLength), 
        0 === this.lenBlock.error.length && (this.blockLength += this.lenBlock.blockLength), 0 === this.valueBlock.error.length && (this.blockLength += this.valueBlock.blockLength), 
        n);
      }
      fromBuffer(t) {
        this.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(t));
        try {
          this.valueBlock.value = decodeURIComponent(escape(this.valueBlock.value));
        } catch (e) {
          this.warnings.push(`Error during "decodeURIComponent": ${e}, using raw string`);
        }
      }
      fromString(t) {
        const e = unescape(encodeURIComponent(t));
        const r = e.length;
        this.valueBlock.valueHex = new ArrayBuffer(r);
        const n = new Uint8Array(this.valueBlock.valueHex);
        for (let i = 0; i < r; i++) n[i] = e.charCodeAt(i);
        this.valueBlock.value = t;
      }
      toString() {
        return `${this.constructor.blockName()} : ${this.valueBlock.value}`;
      }
    }
    class G extends(p(k)){
      constructor(t = {}) {
        super(t), this.valueDec = s(t, "valueDec", -1);
      }
      static blockName() {
        return "relativeSidBlock";
      }
      fromBER(t, e, r) {
        if (0 === r) return e;
        if (!1 === a(this, t, e, r)) return -1;
        const n = new Uint8Array(t, e, r);
        this.valueHex = new ArrayBuffer(r);
        let i = new Uint8Array(this.valueHex);
        for (let l = 0; l < r && (i[l] = 127 & n[l], this.blockLength++, 0 != (128 & n[l])); l++) ;
        const o = new ArrayBuffer(this.blockLength);
        const s = new Uint8Array(o);
        for (let l = 0; l < this.blockLength; l++) s[l] = i[l];
        return this.valueHex = o.slice(0), i = new Uint8Array(this.valueHex), 0 != (128 & n[this.blockLength - 1]) ? (this.error = "End of input reached before message was fully decoded", 
        -1) : (0 === i[0] && this.warnings.push("Needlessly long format of SID encoding"), this.blockLength <= 8 ? this.valueDec = u(i, 7) : (this.isHexOnly = !0, 
        this.warnings.push("Too big SID for decoding, hex only")), e + this.blockLength);
      }
      toBER(t = !1) {
        let e;
        let r;
        if (this.isHexOnly) {
          if (!0 === t) return new ArrayBuffer(this.valueHex.byteLength);
          const n = new Uint8Array(this.valueHex);
          e = new ArrayBuffer(this.blockLength), r = new Uint8Array(e);
          for (let t = 0; t < this.blockLength - 1; t++) r[t] = 128 | n[t];
          return r[this.blockLength - 1] = n[this.blockLength - 1], e;
        }
        const n = c(this.valueDec, 7);
        if (0 === n.byteLength) return this.error = "Error during encoding SID value", new ArrayBuffer(0);
        if (e = new ArrayBuffer(n.byteLength), !1 === t) {
          const t = new Uint8Array(n);
          r = new Uint8Array(e);
          for (let e = 0; e < n.byteLength - 1; e++) r[e] = 128 | t[e];
          r[n.byteLength - 1] = t[n.byteLength - 1];
        }
        return e;
      }
      toString() {
        let t = "";
        return t = !0 === this.isHexOnly ? l(this.valueHex, 0, this.valueHex.byteLength) : this.valueDec.toString(), t;
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.valueDec = this.valueDec, t;
      }
    }
    class z extends w {
      constructor(t = {}) {
        super(t), this.fromString(s(t, "value", ""));
      }
      fromBER(t, e, r) {
        let n = e;
        for (;r > 0; ) {
          const e = new G;
          if (n = e.fromBER(t, n, r), -1 === n) return this.blockLength = 0, this.error = e.error, n;
          this.blockLength += e.blockLength, r -= e.blockLength, this.value.push(e);
        }
        return n;
      }
      toBER(t = !1) {
        let e = new ArrayBuffer(0);
        for (let r = 0; r < this.value.length; r++) {
          const n = this.value[r].toBER(t);
          if (0 === n.byteLength) return this.error = this.value[r].error, new ArrayBuffer(0);
          e = h(e, n);
        }
        return e;
      }
      fromString(t) {
        this.value = [];
        let e = 0;
        let r = 0;
        let n = "";
        do {
          r = t.indexOf(".", e), n = -1 === r ? t.substr(e) : t.substr(e, r - e), e = r + 1;
          const i = new G;
          if (i.valueDec = parseInt(n, 10), isNaN(i.valueDec)) return !0;
          this.value.push(i);
        } while (-1 !== r);
        return !0;
      }
      toString() {
        let t = "";
        let e = !1;
        for (let r = 0; r < this.value.length; r++) {
          e = this.value[r].isHexOnly;
          let n = this.value[r].toString();
          0 !== r && (t = `${t}.`), e ? (n = `{${n}}`, t += n) : t += n;
        }
        return t;
      }
      static blockName() {
        return "RelativeObjectIdentifierValueBlock";
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        t.value = this.toString(), t.sidArray = [];
        for (let r = 0; r < this.value.length; r++) t.sidArray.push(this.value[r].toJSON());
        return t;
      }
    }
    class Z extends A {
      constructor(t = {}) {
        super(t, z), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 13;
      }
      static blockName() {
        return "RelativeObjectIdentifier";
      }
    }
    class Y extends(p(k)){
      constructor(t = {}) {
        super(t), this.isHexOnly = !0, this.value = "";
      }
      static blockName() {
        return "BmpStringValueBlock";
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.value = this.value, t;
      }
    }
    class q extends A {
      constructor(t = {}) {
        super(t, Y), "value" in t && this.fromString(t.value), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 30;
      }
      static blockName() {
        return "BMPString";
      }
      fromBER(t, e, r) {
        const n = this.valueBlock.fromBER(t, e, !0 === this.lenBlock.isIndefiniteForm ? r : this.lenBlock.length);
        return -1 === n ? (this.error = this.valueBlock.error, n) : (this.fromBuffer(this.valueBlock.valueHex), 0 === this.idBlock.error.length && (this.blockLength += this.idBlock.blockLength), 
        0 === this.lenBlock.error.length && (this.blockLength += this.lenBlock.blockLength), 0 === this.valueBlock.error.length && (this.blockLength += this.valueBlock.blockLength), 
        n);
      }
      fromBuffer(t) {
        const e = t.slice(0);
        const r = new Uint8Array(e);
        for (let n = 0; n < r.length; n += 2) {
          const t = r[n];
          r[n] = r[n + 1], r[n + 1] = t;
        }
        this.valueBlock.value = String.fromCharCode.apply(null, new Uint16Array(e));
      }
      fromString(t) {
        const e = t.length;
        this.valueBlock.valueHex = new ArrayBuffer(2 * e);
        const r = new Uint8Array(this.valueBlock.valueHex);
        for (let n = 0; n < e; n++) {
          const e = c(t.charCodeAt(n), 8);
          const i = new Uint8Array(e);
          if (i.length > 2) continue;
          const o = 2 - i.length;
          for (let t = i.length - 1; t >= 0; t--) r[2 * n + t + o] = i[t];
        }
        this.valueBlock.value = t;
      }
      toString() {
        return `${this.constructor.blockName()} : ${this.valueBlock.value}`;
      }
    }
    class Q extends(p(k)){
      constructor(t = {}) {
        super(t), this.isHexOnly = !0, this.value = "";
      }
      static blockName() {
        return "UniversalStringValueBlock";
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.value = this.value, t;
      }
    }
    class X extends A {
      constructor(t = {}) {
        super(t, Q), "value" in t && this.fromString(t.value), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 28;
      }
      static blockName() {
        return "UniversalString";
      }
      fromBER(t, e, r) {
        const n = this.valueBlock.fromBER(t, e, !0 === this.lenBlock.isIndefiniteForm ? r : this.lenBlock.length);
        return -1 === n ? (this.error = this.valueBlock.error, n) : (this.fromBuffer(this.valueBlock.valueHex), 0 === this.idBlock.error.length && (this.blockLength += this.idBlock.blockLength), 
        0 === this.lenBlock.error.length && (this.blockLength += this.lenBlock.blockLength), 0 === this.valueBlock.error.length && (this.blockLength += this.valueBlock.blockLength), 
        n);
      }
      fromBuffer(t) {
        const e = t.slice(0);
        const r = new Uint8Array(e);
        for (let n = 0; n < r.length; n += 4) r[n] = r[n + 3], r[n + 1] = r[n + 2], r[n + 2] = 0, r[n + 3] = 0;
        this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(e));
      }
      fromString(t) {
        const e = t.length;
        this.valueBlock.valueHex = new ArrayBuffer(4 * e);
        const r = new Uint8Array(this.valueBlock.valueHex);
        for (let n = 0; n < e; n++) {
          const e = c(t.charCodeAt(n), 8);
          const i = new Uint8Array(e);
          if (i.length > 4) continue;
          const o = 4 - i.length;
          for (let t = i.length - 1; t >= 0; t--) r[4 * n + t + o] = i[t];
        }
        this.valueBlock.value = t;
      }
      toString() {
        return `${this.constructor.blockName()} : ${this.valueBlock.value}`;
      }
    }
    class tt extends(p(k)){
      constructor(t = {}) {
        super(t), this.value = "", this.isHexOnly = !0;
      }
      static blockName() {
        return "SimpleStringValueBlock";
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.value = this.value, t;
      }
    }
    class et extends A {
      constructor(t = {}) {
        super(t, tt), "value" in t && this.fromString(t.value);
      }
      static blockName() {
        return "SIMPLESTRING";
      }
      fromBER(t, e, r) {
        const n = this.valueBlock.fromBER(t, e, !0 === this.lenBlock.isIndefiniteForm ? r : this.lenBlock.length);
        return -1 === n ? (this.error = this.valueBlock.error, n) : (this.fromBuffer(this.valueBlock.valueHex), 0 === this.idBlock.error.length && (this.blockLength += this.idBlock.blockLength), 
        0 === this.lenBlock.error.length && (this.blockLength += this.lenBlock.blockLength), 0 === this.valueBlock.error.length && (this.blockLength += this.valueBlock.blockLength), 
        n);
      }
      fromBuffer(t) {
        this.valueBlock.value = String.fromCharCode.apply(null, new Uint8Array(t));
      }
      fromString(t) {
        const e = t.length;
        this.valueBlock.valueHex = new ArrayBuffer(e);
        const r = new Uint8Array(this.valueBlock.valueHex);
        for (let n = 0; n < e; n++) r[n] = t.charCodeAt(n);
        this.valueBlock.value = t;
      }
      toString() {
        return `${this.constructor.blockName()} : ${this.valueBlock.value}`;
      }
    }
    class rt extends et {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 18;
      }
      static blockName() {
        return "NumericString";
      }
    }
    class nt extends et {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 19;
      }
      static blockName() {
        return "PrintableString";
      }
    }
    class it extends et {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 20;
      }
      static blockName() {
        return "TeletexString";
      }
    }
    class ot extends et {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 21;
      }
      static blockName() {
        return "VideotexString";
      }
    }
    class st extends et {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 22;
      }
      static blockName() {
        return "IA5String";
      }
    }
    class lt extends et {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 25;
      }
      static blockName() {
        return "GraphicString";
      }
    }
    class at extends et {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 26;
      }
      static blockName() {
        return "VisibleString";
      }
    }
    class ut extends et {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 27;
      }
      static blockName() {
        return "GeneralString";
      }
    }
    class ct extends et {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 29;
      }
      static blockName() {
        return "CharacterString";
      }
    }
    class ht extends at {
      constructor(t = {}) {
        if (super(t), this.year = 0, this.month = 0, this.day = 0, this.hour = 0, this.minute = 0, this.second = 0, "value" in t) {
          this.fromString(t.value), this.valueBlock.valueHex = new ArrayBuffer(t.value.length);
          const e = new Uint8Array(this.valueBlock.valueHex);
          for (let r = 0; r < t.value.length; r++) e[r] = t.value.charCodeAt(r);
        }
        "valueDate" in t && (this.fromDate(t.valueDate), this.valueBlock.valueHex = this.toBuffer()), this.idBlock.tagClass = 1, 
        this.idBlock.tagNumber = 23;
      }
      fromBER(t, e, r) {
        const n = this.valueBlock.fromBER(t, e, !0 === this.lenBlock.isIndefiniteForm ? r : this.lenBlock.length);
        return -1 === n ? (this.error = this.valueBlock.error, n) : (this.fromBuffer(this.valueBlock.valueHex), 0 === this.idBlock.error.length && (this.blockLength += this.idBlock.blockLength), 
        0 === this.lenBlock.error.length && (this.blockLength += this.lenBlock.blockLength), 0 === this.valueBlock.error.length && (this.blockLength += this.valueBlock.blockLength), 
        n);
      }
      fromBuffer(t) {
        this.fromString(String.fromCharCode.apply(null, new Uint8Array(t)));
      }
      toBuffer() {
        const t = this.toString();
        const e = new ArrayBuffer(t.length);
        const r = new Uint8Array(e);
        for (let n = 0; n < t.length; n++) r[n] = t.charCodeAt(n);
        return e;
      }
      fromDate(t) {
        this.year = t.getUTCFullYear(), this.month = t.getUTCMonth() + 1, this.day = t.getUTCDate(), this.hour = t.getUTCHours(), 
        this.minute = t.getUTCMinutes(), this.second = t.getUTCSeconds();
      }
      toDate() {
        return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second));
      }
      fromString(t) {
        const e = /(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})Z/gi.exec(t);
        if (null === e) return void (this.error = "Wrong input string for convertion");
        const r = parseInt(e[1], 10);
        this.year = r >= 50 ? 1900 + r : 2e3 + r, this.month = parseInt(e[2], 10), this.day = parseInt(e[3], 10), this.hour = parseInt(e[4], 10), 
        this.minute = parseInt(e[5], 10), this.second = parseInt(e[6], 10);
      }
      toString() {
        const t = new Array(7);
        return t[0] = m(this.year < 2e3 ? this.year - 1900 : this.year - 2e3, 2), t[1] = m(this.month, 2), t[2] = m(this.day, 2), 
        t[3] = m(this.hour, 2), t[4] = m(this.minute, 2), t[5] = m(this.second, 2), t[6] = "Z", t.join("");
      }
      static blockName() {
        return "UTCTime";
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.year = this.year, t.month = this.month, t.day = this.day, t.hour = this.hour, t.minute = this.minute, t.second = this.second, 
        t;
      }
    }
    class ft extends at {
      constructor(t = {}) {
        if (super(t), this.year = 0, this.month = 0, this.day = 0, this.hour = 0, this.minute = 0, this.second = 0, this.millisecond = 0, 
        "value" in t) {
          this.fromString(t.value), this.valueBlock.valueHex = new ArrayBuffer(t.value.length);
          const e = new Uint8Array(this.valueBlock.valueHex);
          for (let r = 0; r < t.value.length; r++) e[r] = t.value.charCodeAt(r);
        }
        "valueDate" in t && (this.fromDate(t.valueDate), this.valueBlock.valueHex = this.toBuffer()), this.idBlock.tagClass = 1, 
        this.idBlock.tagNumber = 24;
      }
      fromBER(t, e, r) {
        const n = this.valueBlock.fromBER(t, e, !0 === this.lenBlock.isIndefiniteForm ? r : this.lenBlock.length);
        return -1 === n ? (this.error = this.valueBlock.error, n) : (this.fromBuffer(this.valueBlock.valueHex), 0 === this.idBlock.error.length && (this.blockLength += this.idBlock.blockLength), 
        0 === this.lenBlock.error.length && (this.blockLength += this.lenBlock.blockLength), 0 === this.valueBlock.error.length && (this.blockLength += this.valueBlock.blockLength), 
        n);
      }
      fromBuffer(t) {
        this.fromString(String.fromCharCode.apply(null, new Uint8Array(t)));
      }
      toBuffer() {
        const t = this.toString();
        const e = new ArrayBuffer(t.length);
        const r = new Uint8Array(e);
        for (let n = 0; n < t.length; n++) r[n] = t.charCodeAt(n);
        return e;
      }
      fromDate(t) {
        this.year = t.getUTCFullYear(), this.month = t.getUTCMonth() + 1, this.day = t.getUTCDate(), this.hour = t.getUTCHours(), 
        this.minute = t.getUTCMinutes(), this.second = t.getUTCSeconds(), this.millisecond = t.getUTCMilliseconds();
      }
      toDate() {
        return new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond));
      }
      fromString(t) {
        let e = !1;
        let r = "";
        let n = "";
        let i = 0;
        let o;
        let s = 0;
        let l = 0;
        if ("Z" === t[t.length - 1]) r = t.substr(0, t.length - 1), e = !0; else {
          const e = new Number(t[t.length - 1]);
          if (isNaN(e.valueOf())) throw new Error("Wrong input string for convertion");
          r = t;
        }
        if (e) {
          if (-1 !== r.indexOf("+")) throw new Error("Wrong input string for convertion");
          if (-1 !== r.indexOf("-")) throw new Error("Wrong input string for convertion");
        } else {
          let t = 1;
          let e = r.indexOf("+");
          let n = "";
          if (-1 === e && (e = r.indexOf("-"), t = -1), -1 !== e) {
            if (n = r.substr(e + 1), r = r.substr(0, e), 2 !== n.length && 4 !== n.length) throw new Error("Wrong input string for convertion");
            let i = new Number(n.substr(0, 2));
            if (isNaN(i.valueOf())) throw new Error("Wrong input string for convertion");
            if (s = t * i, 4 === n.length) {
              if (i = new Number(n.substr(2, 2)), isNaN(i.valueOf())) throw new Error("Wrong input string for convertion");
              l = t * i;
            }
          }
        }
        let a = r.indexOf(".");
        if (-1 === a && (a = r.indexOf(",")), -1 !== a) {
          const t = new Number(`0${r.substr(a)}`);
          if (isNaN(t.valueOf())) throw new Error("Wrong input string for convertion");
          i = t.valueOf(), n = r.substr(0, a);
        } else n = r;
        switch (!0) {
         case 8 === n.length:
          if (o = /(\d{4})(\d{2})(\d{2})/gi, -1 !== a) throw new Error("Wrong input string for convertion");
          break;

         case 10 === n.length:
          if (o = /(\d{4})(\d{2})(\d{2})(\d{2})/gi, -1 !== a) {
            let t = 60 * i;
            this.minute = Math.floor(t), t = 60 * (t - this.minute), this.second = Math.floor(t), t = 1e3 * (t - this.second), this.millisecond = Math.floor(t);
          }
          break;

         case 12 === n.length:
          if (o = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})/gi, -1 !== a) {
            let t = 60 * i;
            this.second = Math.floor(t), t = 1e3 * (t - this.second), this.millisecond = Math.floor(t);
          }
          break;

         case 14 === n.length:
          if (o = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/gi, -1 !== a) {
            const t = 1e3 * i;
            this.millisecond = Math.floor(t);
          }
          break;

         default:
          throw new Error("Wrong input string for convertion");
        }
        const u = o.exec(n);
        if (null === u) throw new Error("Wrong input string for convertion");
        for (let c = 1; c < u.length; c++) switch (c) {
         case 1:
          this.year = parseInt(u[c], 10);
          break;

         case 2:
          this.month = parseInt(u[c], 10);
          break;

         case 3:
          this.day = parseInt(u[c], 10);
          break;

         case 4:
          this.hour = parseInt(u[c], 10) + s;
          break;

         case 5:
          this.minute = parseInt(u[c], 10) + l;
          break;

         case 6:
          this.second = parseInt(u[c], 10);
          break;

         default:
          throw new Error("Wrong input string for convertion");
        }
        if (!1 === e) {
          const t = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);
          this.year = t.getUTCFullYear(), this.month = t.getUTCMonth(), this.day = t.getUTCDay(), this.hour = t.getUTCHours(), this.minute = t.getUTCMinutes(), 
          this.second = t.getUTCSeconds(), this.millisecond = t.getUTCMilliseconds();
        }
      }
      toString() {
        const t = [];
        return t.push(m(this.year, 4)), t.push(m(this.month, 2)), t.push(m(this.day, 2)), t.push(m(this.hour, 2)), t.push(m(this.minute, 2)), 
        t.push(m(this.second, 2)), 0 !== this.millisecond && (t.push("."), t.push(m(this.millisecond, 3))), t.push("Z"), t.join("");
      }
      static blockName() {
        return "GeneralizedTime";
      }
      toJSON() {
        let t = {};
        try {
          t = super.toJSON();
        } catch (e) {}
        return t.year = this.year, t.month = this.month, t.day = this.day, t.hour = this.hour, t.minute = this.minute, t.second = this.second, 
        t.millisecond = this.millisecond, t;
      }
    }
    class gt extends V {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 31;
      }
      static blockName() {
        return "DATE";
      }
    }
    class dt extends V {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 32;
      }
      static blockName() {
        return "TimeOfDay";
      }
    }
    class mt extends V {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 33;
      }
      static blockName() {
        return "DateTime";
      }
    }
    class yt extends V {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 34;
      }
      static blockName() {
        return "Duration";
      }
    }
    class vt extends V {
      constructor(t = {}) {
        super(t), this.idBlock.tagClass = 1, this.idBlock.tagNumber = 14;
      }
      static blockName() {
        return "TIME";
      }
    }
    class kt {
      constructor(t = {}) {
        this.name = s(t, "name", ""), this.optional = s(t, "optional", !1);
      }
    }
    class pt {
      constructor(t = {}) {
        this.name = s(t, "name", ""), this.optional = s(t, "optional", !1), this.value = s(t, "value", new kt), this.local = s(t, "local", !1);
      }
    }
    function Bt(t, e, r) {
      const n = e;
      let i = new A({}, Object);
      const o = new k;
      if (!1 === a(o, t, e, r)) return i.error = o.error, {
        offset: -1,
        result: i
      };
      if (0 === new Uint8Array(t, e, r).length) return i.error = "Zero buffer length", {
        offset: -1,
        result: i
      };
      let s = i.idBlock.fromBER(t, e, r);
      if (i.warnings.concat(i.idBlock.warnings), -1 === s) return i.error = i.idBlock.error, {
        offset: -1,
        result: i
      };
      if (e = s, r -= i.idBlock.blockLength, s = i.lenBlock.fromBER(t, e, r), i.warnings.concat(i.lenBlock.warnings), -1 === s) return i.error = i.lenBlock.error, 
      {
        offset: -1,
        result: i
      };
      if (e = s, r -= i.lenBlock.blockLength, !1 === i.idBlock.isConstructed && !0 === i.lenBlock.isIndefiniteForm) return i.error = "Indefinite length form used for primitive encoding form", 
      {
        offset: -1,
        result: i
      };
      let l = A;
      if (1 === i.idBlock.tagClass) {
        if (i.idBlock.tagNumber >= 37 && !1 === i.idBlock.isHexOnly) return i.error = "UNIVERSAL 37 and upper tags are reserved by ASN.1 standard", 
        {
          offset: -1,
          result: i
        };
        switch (i.idBlock.tagNumber) {
         case 0:
          if (!0 === i.idBlock.isConstructed && i.lenBlock.length > 0) return i.error = "Type [UNIVERSAL 0] is reserved", {
            offset: -1,
            result: i
          };
          l = L;
          break;

         case 1:
          l = O;
          break;

         case 2:
          l = _;
          break;

         case 3:
          l = F;
          break;

         case 4:
          l = D;
          break;

         case 5:
          l = R;
          break;

         case 6:
          l = K;
          break;

         case 10:
          l = J;
          break;

         case 12:
          l = V;
          break;

         case 13:
          l = Z;
          break;

         case 14:
          l = vt;
          break;

         case 15:
          return i.error = "[UNIVERSAL 15] is reserved by ASN.1 standard", {
            offset: -1,
            result: i
          };

         case 16:
          l = H;
          break;

         case 17:
          l = C;
          break;

         case 18:
          l = rt;
          break;

         case 19:
          l = nt;
          break;

         case 20:
          l = it;
          break;

         case 21:
          l = ot;
          break;

         case 22:
          l = st;
          break;

         case 23:
          l = ht;
          break;

         case 24:
          l = ft;
          break;

         case 25:
          l = lt;
          break;

         case 26:
          l = at;
          break;

         case 27:
          l = ut;
          break;

         case 28:
          l = X;
          break;

         case 29:
          l = ct;
          break;

         case 30:
          l = q;
          break;

         case 31:
          l = gt;
          break;

         case 32:
          l = dt;
          break;

         case 33:
          l = mt;
          break;

         case 34:
          l = yt;
          break;

         default:
          {
            let t;
            t = !0 === i.idBlock.isConstructed ? new S : new N, t.idBlock = i.idBlock, t.lenBlock = i.lenBlock, t.warnings = i.warnings, 
            i = t;
          }
        }
      } else l = !0 === i.idBlock.isConstructed ? S : N;
      return i = function(t, e) {
        if (t instanceof e) return t;
        const r = new e;
        return r.idBlock = t.idBlock, r.lenBlock = t.lenBlock, r.warnings = t.warnings, r.valueBeforeDecode = t.valueBeforeDecode.slice(0), 
        r;
      }(i, l), s = i.fromBER(t, e, !0 === i.lenBlock.isIndefiniteForm ? r : i.lenBlock.length), i.valueBeforeDecode = t.slice(n, n + i.blockLength), 
      {
        offset: s,
        result: i
      };
    }
    function bt(t) {
      if (0 === t.byteLength) {
        const t = new A({}, Object);
        return t.error = "Input buffer has zero length", {
          offset: -1,
          result: t
        };
      }
      return Bt(t, 0, t.byteLength);
    }
    function wt(t, e, r) {
      if (r instanceof class {
        constructor(t = {}) {
          this.value = s(t, "value", []), this.optional = s(t, "optional", !1);
        }
      }) {
        const n = !1;
        for (let i = 0; i < r.value.length; i++) {
          if (!0 === wt(t, e, r.value[i]).verified) return {
            verified: !0,
            result: t
          };
        }
        if (!1 === n) {
          const t = {
            verified: !1,
            result: {
              error: "Wrong values for Choice type"
            }
          };
          return r.hasOwnProperty("name") && (t.name = r.name), t;
        }
      }
      if (r instanceof kt) return r.hasOwnProperty("name") && (t[r.name] = e), {
        verified: !0,
        result: t
      };
      if (t instanceof Object == !1) return {
        verified: !1,
        result: {
          error: "Wrong root object"
        }
      };
      if (e instanceof Object == !1) return {
        verified: !1,
        result: {
          error: "Wrong ASN.1 data"
        }
      };
      if (r instanceof Object == !1) return {
        verified: !1,
        result: {
          error: "Wrong ASN.1 schema"
        }
      };
      if ("idBlock" in r == !1) return {
        verified: !1,
        result: {
          error: "Wrong ASN.1 schema"
        }
      };
      if ("fromBER" in r.idBlock == !1) return {
        verified: !1,
        result: {
          error: "Wrong ASN.1 schema"
        }
      };
      if ("toBER" in r.idBlock == !1) return {
        verified: !1,
        result: {
          error: "Wrong ASN.1 schema"
        }
      };
      const n = r.idBlock.toBER(!1);
      if (0 === n.byteLength) return {
        verified: !1,
        result: {
          error: "Error encoding idBlock for ASN.1 schema"
        }
      };
      if (-1 === r.idBlock.fromBER(n, 0, n.byteLength)) return {
        verified: !1,
        result: {
          error: "Error decoding idBlock for ASN.1 schema"
        }
      };
      if (!1 === r.idBlock.hasOwnProperty("tagClass")) return {
        verified: !1,
        result: {
          error: "Wrong ASN.1 schema"
        }
      };
      if (r.idBlock.tagClass !== e.idBlock.tagClass) return {
        verified: !1,
        result: t
      };
      if (!1 === r.idBlock.hasOwnProperty("tagNumber")) return {
        verified: !1,
        result: {
          error: "Wrong ASN.1 schema"
        }
      };
      if (r.idBlock.tagNumber !== e.idBlock.tagNumber) return {
        verified: !1,
        result: t
      };
      if (!1 === r.idBlock.hasOwnProperty("isConstructed")) return {
        verified: !1,
        result: {
          error: "Wrong ASN.1 schema"
        }
      };
      if (r.idBlock.isConstructed !== e.idBlock.isConstructed) return {
        verified: !1,
        result: t
      };
      if ("isHexOnly" in r.idBlock == !1) return {
        verified: !1,
        result: {
          error: "Wrong ASN.1 schema"
        }
      };
      if (r.idBlock.isHexOnly !== e.idBlock.isHexOnly) return {
        verified: !1,
        result: t
      };
      if (!0 === r.idBlock.isHexOnly) {
        if ("valueHex" in r.idBlock == !1) return {
          verified: !1,
          result: {
            error: "Wrong ASN.1 schema"
          }
        };
        const n = new Uint8Array(r.idBlock.valueHex);
        const i = new Uint8Array(e.idBlock.valueHex);
        if (n.length !== i.length) return {
          verified: !1,
          result: t
        };
        for (let e = 0; e < n.length; e++) if (n[e] !== i[1]) return {
          verified: !1,
          result: t
        };
      }
      if (r.hasOwnProperty("name") && (r.name = r.name.replace(/^\s+|\s+$/g, ""), "" !== r.name && (t[r.name] = e)), !0 === r.idBlock.isConstructed) {
        let n = 0;
        let i = {
          verified: !1
        };
        let o = r.valueBlock.value.length;
        if (o > 0 && r.valueBlock.value[0] instanceof pt && (o = e.valueBlock.value.length), 0 === o) return {
          verified: !0,
          result: t
        };
        if (0 === e.valueBlock.value.length && 0 !== r.valueBlock.value.length) {
          let e = !0;
          for (let t = 0; t < r.valueBlock.value.length; t++) e = e && (r.valueBlock.value[t].optional || !1);
          return !0 === e ? {
            verified: !0,
            result: t
          } : (r.hasOwnProperty("name") && (r.name = r.name.replace(/^\s+|\s+$/g, ""), "" !== r.name && delete t[r.name]), t.error = "Inconsistent object length", 
          {
            verified: !1,
            result: t
          });
        }
        for (let s = 0; s < o; s++) if (s - n >= e.valueBlock.value.length) {
          if (!1 === r.valueBlock.value[s].optional) {
            const e = {
              verified: !1,
              result: t
            };
            return t.error = "Inconsistent length between ASN.1 data and schema", r.hasOwnProperty("name") && (r.name = r.name.replace(/^\s+|\s+$/g, ""), 
            "" !== r.name && (delete t[r.name], e.name = r.name)), e;
          }
        } else if (r.valueBlock.value[0] instanceof pt) {
          if (i = wt(t, e.valueBlock.value[s], r.valueBlock.value[0].value), !1 === i.verified) {
            if (!0 !== r.valueBlock.value[0].optional) return r.hasOwnProperty("name") && (r.name = r.name.replace(/^\s+|\s+$/g, ""), 
            "" !== r.name && delete t[r.name]), i;
            n++;
          }
          if ("name" in r.valueBlock.value[0] && r.valueBlock.value[0].name.length > 0) {
            let n = {};
            n = "local" in r.valueBlock.value[0] && !0 === r.valueBlock.value[0].local ? e : t, void 0 === n[r.valueBlock.value[0].name] && (n[r.valueBlock.value[0].name] = []), 
            n[r.valueBlock.value[0].name].push(e.valueBlock.value[s]);
          }
        } else if (i = wt(t, e.valueBlock.value[s - n], r.valueBlock.value[s]), !1 === i.verified) {
          if (!0 !== r.valueBlock.value[s].optional) return r.hasOwnProperty("name") && (r.name = r.name.replace(/^\s+|\s+$/g, ""), 
          "" !== r.name && delete t[r.name]), i;
          n++;
        }
        if (!1 === i.verified) {
          const e = {
            verified: !1,
            result: t
          };
          return r.hasOwnProperty("name") && (r.name = r.name.replace(/^\s+|\s+$/g, ""), "" !== r.name && (delete t[r.name], e.name = r.name)), 
          e;
        }
        return {
          verified: !0,
          result: t
        };
      }
      if ("primitiveSchema" in r && "valueHex" in e.valueBlock) {
        const n = bt(e.valueBlock.valueHex);
        if (-1 === n.offset) {
          const e = {
            verified: !1,
            result: n.result
          };
          return r.hasOwnProperty("name") && (r.name = r.name.replace(/^\s+|\s+$/g, ""), "" !== r.name && (delete t[r.name], e.name = r.name)), 
          e;
        }
        return wt(t, n.result, r.primitiveSchema);
      }
      return {
        verified: !0,
        result: t
      };
    }
    function At(t, e, r) {
      return t instanceof Object == !1 ? r : e in t ? t[e] : r;
    }
    function xt(t, e = 0, r = t.byteLength - e, n = !1) {
      let i = "";
      for (const o of new Uint8Array(t, e, r)) {
        const t = o.toString(16).toUpperCase();
        1 === t.length && (i += "0"), i += t, n && (i += " ");
      }
      return i.trim();
    }
    Math.log(2);
    function Nt(t, e) {
      for (const r of e) delete t[r];
    }
    const Et = function() {
      function t(e) {
        if (void 0 === e && (e = {}), "string" == typeof e) throw new TypeError("Unimplemented: Not accepting string yet.");
        if (e instanceof ArrayBuffer) {
          var r = fromBER(e);
          this.fromSchema(r.result);
        } else this.algorithmId = At(e, "algorithmId"), "algorithmParams" in e && (this.algorithmParams = At(e, "algorithmParams", t.defaultValues("algorithmParams")));
      }
      return t.defaultValues = function(t) {
        if ("algorithmParams" === t) return new kt;
        throw new Error("Invalid member name for AlgorithmIdentifier class: " + t);
      }, t.compareWithDefault = function(t, e) {
        switch (t) {
         case "algorithmId":
          return "" === e;

         case "algorithmParams":
          return e instanceof asn1js.Any;

         default:
          throw new Error("Invalid member name for AlgorithmIdentifier class: " + t);
        }
      }, t.schema = function(t) {
        void 0 === t && (t = {});
        var e = At(t, "names", {});
        return new H({
          name: e.blockName || "",
          optional: e.optional || !1,
          value: [ new K({
            name: e.algorithmIdentifier || "algorithm"
          }), new kt({
            name: e.algorithmParams || "parameters",
            optional: !0
          }) ]
        });
      }, t.prototype.fromSchema = function(e) {
        Nt(e, [ "algorithm", "params" ]);
        var r = wt(e, e, t.schema({
          names: {
            algorithmIdentifier: "algorithm",
            algorithmParams: "params"
          }
        }));
        if (!1 === r.verified) throw new Error("Object's schema was not verified against input data for AlgorithmIdentifier");
        this.algorithmId = r.result.algorithm.valueBlock.toString(), "params" in r.result && (this.algorithmParams = r.result.params);
      }, t.prototype.toSchema = function() {
        var t = [];
        return t.push(new K({
          value: this.algorithmId
        })), "algorithmParams" in this && this.algorithmParams instanceof asn1js.Any == !1 && t.push(this.algorithmParams), new H({
          value: t
        });
      }, t.prototype.toJSON = function() {
        var t = {
          algorithmId: this.algorithmId
        };
        return "algorithmParams" in this && this.algorithmParams instanceof asn1js.Any == !1 && (t.algorithmParams = this.algorithmParams.toJSON()), 
        t;
      }, t.prototype.isEqual = function(e) {
        return e instanceof t != !1 && (this.algorithmId === e.algorithmId && ("algorithmParams" in this ? "algorithmParams" in e && JSON.stringify(this.algorithmParams) === JSON.stringify(e.algorithmParams) : !("algorithmParams" in e)));
      }, t;
    }();
    const St = function() {
      function t(t) {
        if (void 0 === t && (t = {}), "string" == typeof t) throw new TypeError("Not accepting string. For base64, convert to ArrayBuffer.");
        if (t instanceof ArrayBuffer) {
          var e = bt(t);
          this.fromSchema(e.result);
        } else this.signatureAlgorithm = At(t, "signatureAlgorithm"), this.publicKey = At(t, "publicKey");
      }
      return t.schema = function(t) {
        void 0 === t && (t = {});
        var e = At(t, "names", {});
        return new H({
          name: e.blockName || "",
          optional: !0,
          value: [ Et.schema(e.signatureAlgorithm || {
            names: {
              blockName: "signatureAlgorithm"
            }
          }), new F({
            name: "publicKey"
          }) ]
        });
      }, t.prototype.fromSchema = function(e) {
        if (Nt(e, [ "signatureAlgorithm", "publicKey" ]), !1 === wt(e, e, t.schema({
          names: {
            signatureAlgorithm: "signatureAlgorithm",
            publicKey: "publicKey"
          }
        })).verified) throw new Error("Object's schema was not verified against input data for AlgorithmIdentifier");
      }, t;
    }();
    var Ut = function() {
      function t(t) {
        if (void 0 === t && (t = {}), "string" == typeof t) throw new TypeError("Unimplemented: Not accepting string yet.");
        if (t instanceof ArrayBuffer) {
          var e = bt(t);
          this.fromSchema(e.result);
        } else this.devconId = At(t, "devconId"), this.ticketId = At(t, "ticketId"), this.ticketClass = At(t, "ticketClass");
      }
      return t.schema = function(t) {
        void 0 === t && (t = {});
        var e = At(t, "names", {});
        return new H({
          name: e.blockName || "ticket",
          value: [ new V({
            name: e.devconId || "devconId"
          }), new _({
            name: e.ticketId || "ticketId"
          }), new _({
            name: e.ticketClass || "ticketClass"
          }) ]
        });
      }, t.prototype.fromSchema = function(e) {
        Nt(e, [ "devconId", "ticketId", "ticketClass" ]);
        var r = wt(e, e, t.schema());
        if (!1 === r.verified) throw new Error("Object's schema was not verified against input data for DevconTicket");
        if ("devconId" in r.result && (this.devconId = r.result.devconId.valueBlock.value), "ticketId" in r.result) {
          var n = r.result.ticketId.valueBlock._valueHex;
          this.ticketId = parseInt("0x" + xt(n), 16);
        }
        if ("ticketClass" in r.result) {
          var i = r.result.ticketClass.valueBlock._valueHex;
          this.ticketClass = parseInt("0x" + xt(i), 16);
        }
      }, t;
    }();
    var Lt = function() {
      function t(t) {
        if (void 0 === t && (t = {}), "string" == typeof t) {
          var e = (t.startsWith("https://") ? new URL(t).searchParams.get('ticket') : t).split('_').join('/').split('-').join('+').split('.').join('=');
          t = 'undefined' != typeof Buffer ? Uint8Array.from(Buffer.from(e, 'base64')).buffer : Uint8Array.from(atob(e), (function(t) {
            return t.charCodeAt(0);
          })).buffer;
        }
        if (t instanceof ArrayBuffer) {
          var r = bt(t);
          this.fromSchema(r.result);
        } else this.ticket = new Ut(t.ticket), this.commitment = At(t, "commitment"), this.publicKeyInfo = new St(t.publicKeyInfo), 
        this.signatureValue = At(t, "signatureValue");
      }
      return t.schema = function(t) {
        void 0 === t && (t = {});
        var e = At(t, "names", {});
        return new H({
          name: e.blockName || "SignedDevconTicket",
          value: [ Ut.schema(t), new D({
            name: "commitment"
          }), new F({
            name: "signatureValue"
          }) ]
        });
      }, t.prototype.fromSchema = function(e) {
        Nt(e, [ "ticket", "commitment", "publicKeyInfo", "signatureValue" ]);
        var r = wt(e, e, t.schema());
        if (!1 === r.verified) throw new Error("Object's schema was not verified against input data for SignedDevconTicket");
        this.ticket = new Ut(r.result.ticket.valueBeforeDecode), "commitment" in r.result && (this.commitment = r.result.commitment.valueBlock.valueHex), 
        this.publicKeyInfo = new St({
          schema: r.result.publicKeyInfo
        });
        var n = r.result.signatureValue;
        this.signatureValue = n.valueBlock.valueHex;
      }, t;
    }();
    var It = {
      devcon: {
        onChain: !1,
        tokenIssuerPublicKey: "TODO",
        title: 'Devcon 2022',
        tokenName: 'devcon-ticket-local-3002',
        attestationOrigin: "https://stage.attestation.id/",
        tokenOrigin: "https://tokenscript.github.io/token-negotiator-examples/github-pages-use-only/token-outlet-website/build/index.html",
        tokenUrlName: 'ticket',
        unEndPoint: '',
        tokenSecretName: 'secret',
        tokenIdName: 'id',
        unsignedTokenDataName: 'ticket',
        itemStorageKey: 'dcTokens',
        ethKeyitemStorageKey: 'dcEthKeys',
        emblem: 'https://raw.githubusercontent.com/TokenScript/token-negotiator/main/mock-images/devcon.svg',
        tokenParser: Lt
      },
      devcon2: {
        onChain: !1,
        tokenIssuerPublicKey: "TODO",
        title: 'Devcon 2',
        tokenName: 'devcon-ticket-local-3002',
        attestationOrigin: "https://stage.attestation.id/",
        tokenOrigin: "http://localhost:3002/",
        tokenUrlName: 'ticket',
        unEndPoint: '',
        tokenSecretName: 'secret',
        tokenIdName: 'id',
        unsignedTokenDataName: 'ticket',
        itemStorageKey: 'dcTokens',
        ethKeyitemStorageKey: 'dcEthKeys',
        emblem: 'https://raw.githubusercontent.com/TokenScript/token-negotiator/main/mock-images/devcon.svg',
        tokenParser: Lt
      },
      devcon3: {
        onChain: !1,
        tokenIssuerPublicKey: "TODO",
        title: 'Devcon 2',
        tokenName: 'devcon-ticket-local-3002',
        attestationOrigin: "https://stage.attestation.id/",
        tokenOrigin: "http://localhost:3002/",
        tokenUrlName: 'ticket',
        unEndPoint: '',
        tokenSecretName: 'secret',
        tokenIdName: 'id',
        unsignedTokenDataName: 'ticket',
        itemStorageKey: 'dcTokens',
        ethKeyitemStorageKey: 'dcEthKeys',
        emblem: 'https://raw.githubusercontent.com/TokenScript/token-negotiator/main/mock-images/devcon.svg',
        tokenParser: Lt
      },
      devcon4: {
        onChain: !1,
        tokenIssuerPublicKey: "TODO",
        title: 'Devcon 2',
        tokenName: 'devcon-ticket-local-3002',
        attestationOrigin: "https://stage.attestation.id/",
        tokenOrigin: "http://localhost:3002/",
        tokenUrlName: 'ticket',
        unEndPoint: '',
        tokenSecretName: 'secret',
        tokenIdName: 'id',
        unsignedTokenDataName: 'ticket',
        itemStorageKey: 'dcTokens',
        ethKeyitemStorageKey: 'dcEthKeys',
        emblem: 'https://raw.githubusercontent.com/TokenScript/token-negotiator/main/mock-images/devcon.svg',
        tokenParser: Lt
      },
      ck: {
        onChain: !0,
        title: 'Crypto Kitties Holder',
        smartContractAddress: '0x06012c8cf97bead5deae237070f9587f8e7a266d',
        symbol: 'CK',
        emblem: 'https://storage.googleapis.com/ck-kitty-image/0x06012c8cf97bead5deae237070f9587f8e7a266d/47274.png'
      }
    };
    new (function() {
      function t(t) {
        var e = this;
        this.eventReciever = function(t) {
          if ('getTokens' === t.evt) {
            var r = e.prepareTokenOutput(e.tokenName);
            e.eventSender.emitTokens(r);
          }
        }, this.eventSender = {
          emitTokens: function(t) {
            window.parent.postMessage({
              evt: "tokens",
              data: {
                issuer: e.tokenName,
                tokens: t
              }
            }, "*");
          },
          emitTokenProof: function(t) {
            window.parent.postMessage({
              evt: 'tokenProof',
              tokenProof: t
            }, "*");
          }
        };
        var r = t.tokenName;
        this.tokenName = r, function(t, e) {
          if (!t) throw new Error(e);
        }(It[r], "Please provide the token name");
        var n = It[r], o = n.tokenUrlName, s = n.tokenSecretName, l = n.tokenIdName, a = n.itemStorageKey;
        var u = function(t, e, r, n) {
          var o = new URLSearchParams(window.location.search);
          var s = o.get(t);
          var l = o.get(e);
          var a = o.get(r);
          if (s && l) {
            var u = i(n);
            var c = !0;
            var h = u.tokens.map((function(t) {
              t.token === s && (c = !1);
            }));
            return c ? (h.push({
              token: s,
              secret: l,
              id: a,
              magic_link: window.location.href
            }), h) : [];
          }
        }(o, s, l, a);
        u && u.length && function(t, e) {
          t && localStorage.setItem(e, JSON.stringify(t));
        }(u, a), this.sendTokens(r);
      }
      return t.prototype.prepareTokenOutput = function(t) {
        var e = localStorage.getItem(It[t].itemStorageKey);
        if (!e) return [];
        var r = o(e, It[t].tokenParser, It[t].unsignedTokenDataName);
        return n(r, {});
      }, t.prototype.sendTokens = function(t) {
        var e = this;
        var r = window.opener;
        var n = document.referrer;
        var i = this.prepareTokenOutput(t);
        if (r && n) {
          var o = new URL(n).origin;
          r.postMessage({
            evt: "tokens",
            data: {
              issuer: this.tokenName,
              tokens: i || []
            }
          }, o);
        } else window.addEventListener('message', (function(t) {
          e.eventReciever(t.data);
        }), !1);
      }, t;
    }())({
      tokenName: 'devcon'
    });
  })();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,