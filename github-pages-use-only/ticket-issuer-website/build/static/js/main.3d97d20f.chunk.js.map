{"version":3,"sources":["Card/index.js","App.js","reportWebVitals.js","index.js"],"names":["MediaCard","tokenInstance","ticketClass","ticketId","devconId","className","Typography","variant","component","toString","color","src","App","useState","tokens","setTokens","email","setEmail","negotiator","Client","useEffect","a","negotiate","openTicketInIframe","id","magicLink","addTokenThroughIframe","devconData","href","onSubmit","event","preventDefault","style","fontSize","marginRight","type","value","onChange","target","length","map","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4UA0BeA,MAtBf,YAAuC,IAAlBC,EAAiB,EAAjBA,cAGXC,EAAoCD,EAApCC,YAAaC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,SAC/B,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,gBAAf,UACE,cAACC,EAAA,EAAD,CAAYD,UAAU,cAAcE,QAAQ,KAAKC,UAAU,KAA3D,SACGN,EAAYO,aAEf,cAACH,EAAA,EAAD,CAAYD,UAAU,WAAWE,QAAQ,QAAQG,MAAM,gBAAgBF,UAAU,IAAjF,SACGL,GAAYA,EAASM,aAExB,eAACH,EAAA,EAAD,CAAYD,UAAU,WAAWE,QAAQ,QAAQG,MAAM,gBAAgBF,UAAU,IAAjF,wBACcJ,GAAYA,EAASK,iBAGrC,qBAAKJ,UAAU,YAAYM,IAAI,iC,MCsEtBC,MApFf,WAGE,MAA0BC,mBAAS,IAAnC,mBAAKC,EAAL,KAAaC,EAAb,KACA,EAAwBF,mBAAS,IAAjC,mBAAKG,EAAL,KAAYC,EAAZ,KASMC,EAAa,IAAIC,IANR,GAGD,uBAEE,IAGhBC,oBAAS,sBAAC,4BAAAC,EAAA,sEAEaH,EAAWI,YAFxB,QAEFR,EAFE,SAGGC,EAAUD,GAHb,2CAIP,IAEH,IAAMS,EAAkB,uCAAG,iCAAAF,EAAA,6DAAQG,EAAR,EAAQA,GAG3BC,EAHmB,+DAGiDD,GAE1EN,EAAWQ,sBAAsBD,GALR,SAOAP,EAAWI,YAPX,OAOnBK,EAPmB,OAQzBZ,EAAUY,GARe,2CAAH,sDAoBxB,OACE,iCACE,mBAAGC,KAAK,IAAR,SAAY,qBAAKvB,UAAU,OAAOM,IAAI,mBACtC,qBAAKN,UAAU,aAAf,SACE,+DAEF,qBAAKA,UAAU,aAAf,SACE,qBAAKA,UAAU,gBAAgBM,IAAI,0BAErC,qBAAKN,UAAU,aAAf,SACE,2KAEF,qBAAKA,UAAU,aAAf,SACE,mFAEF,qBAAKA,UAAU,aAAf,SACA,uBAAMwB,SArBW,SAACC,GACpBA,EAAMC,iBACNR,EAAmB,CAAEC,GAAIR,KAmBvB,UACE,kCAAO,sBAAMgB,MAAO,CAAEC,SAAU,OAAQC,YAAa,OAA9C,oBACP,uBAAOF,MAAO,CAAEE,YAAa,OAASC,KAAK,QAAQC,MAAOpB,EAAOqB,SA3BlD,SAACP,GACpBb,EAASa,EAAMQ,OAAOF,aA4BlB,uBAAOD,KAAK,SAASC,MAAM,gBAG3BtB,EAAOyB,OAAS,GAChB,gCACE,qBAAKlC,UAAU,aAAf,SACE,gDAEF,qBAAKA,UAAU,aAAf,SACE,qBAAKA,UAAU,gBAAf,SAEIS,GAAUA,EAAOyB,OAAS,GAAKzB,EAAO0B,KAAI,SAACvC,EAAewC,GACxD,OAAO,cAAC,EAAD,CAAkBxC,cAAeA,GAAtBwC,iBCpErBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3d97d20f.chunk.js","sourcesContent":["import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport './Card.css';\n\nfunction MediaCard({ tokenInstance }) {\n\n  // New Data Structure:\n  const { ticketClass, ticketId, devconId } = tokenInstance;\n  return (\n    <div className=\"ticketContainer\">\n      <div className=\"ticketDetails\">\n        <Typography className=\"ticketClass\" variant=\"h5\" component=\"h2\">\n          {ticketClass.toString()}\n        </Typography>\n        <Typography className=\"ticketId\" variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {ticketId && ticketId.toString()}\n        </Typography>\n        <Typography className=\"devconId\" variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          Devcon ID: {devconId && devconId.toString()}\n        </Typography>\n      </div>\n      <img className=\"ticketImg\" src=\"ticket_example_image.svg\"></img>\n    </div>\n  );\n}\n\nexport default MediaCard;\n","import React, { useState, useEffect } from 'react';\nimport { Client } from '@tokenscript/token-negotiator';\nimport Card from './Card';\nimport './App.css';\n\n// A minimal example to read tokens and render them to a view.\n\nfunction App() {\n\n  // local react state for tokens\n  let [tokens, setTokens] = useState([]);\n  let [email, setEmail] = useState('');\n  \n  // create configuration and instance of Negotiator.\n  const filter = {};\n\n  // github pages config\n  const token = \"devcon-ticket-heroku\";\n  \n  const options = {};\n  const negotiator = new Client(filter, token, options);\n  \n  useEffect(async () => {\n    // retrieve existing tokens on initialisation of this component\n    const tokens = await negotiator.negotiate();\n    if(tokens) setTokens(tokens);\n  }, []);\n\n  const openTicketInIframe = async ({id}) => {\n\n    // add token through magic link local\n    const magicLink = `https://crypto-verify.herokuapp.com/issue-ticket/?id=${id}`;\n    \n    negotiator.addTokenThroughIframe(magicLink); \n\n    const devconData = await negotiator.negotiate();\n    setTokens(devconData);\n  }\n\n  const handleChange = (event) => {\n    setEmail(event.target.value);\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();    \n    openTicketInIframe({ id: email});\n  }\n\n  return (\n    <main>\n      <a href=\"/\"><img className=\"logo\" src=\"./devcon.svg\"></img></a>\n      <div className=\"flexCenter\">\n        <p>[DEMO Ticket Issuer Website]</p>\n      </div>\n      <div className=\"flexCenter\">\n        <img className=\"devcon_bogota\" src=\"./devcon_bogota.svg\"></img>\n      </div>\n      <div className=\"flexCenter\">\n        <p>A Devcon ticket provides access to the event and special offers between the dates X-XX for hotel bookings, travel, restaurants and more.</p>\n      </div>\n      <div className=\"flexCenter\">\n        <p>Claim your ticket (demonstration purposes only):</p>\n      </div>\n      <div className=\"flexCenter\">\n      <form onSubmit={handleSubmit}>\n        <label><span style={{ fontSize: '14px', marginRight: '7px' }}>Email:</span>\n        <input style={{ marginRight: '7px' }} type=\"email\" value={email} onChange={handleChange} />\n        </label>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      </div>\n      { tokens.length > 0 &&\n        <div>\n          <div className=\"flexCenter\">\n            <p>Your tickets:</p>\n          </div>\n          <div className=\"flexCenter\">\n            <div className=\"tokensWrapper\">\n              {\n                tokens && tokens.length > 0 && tokens.map((tokenInstance, index) => {\n                  return <Card key={index} tokenInstance={tokenInstance} />\n                })\n              }\n            </div> \n          </div> \n        </div>\n      }\n    </main>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}